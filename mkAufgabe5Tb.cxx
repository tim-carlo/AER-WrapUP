/*
 * Generated by Bluespec Compiler, version 2023.07-7-g527eaa0b (build 527eaa0b)
 * 
 * On Sat Feb 10 19:23:35 UTC 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkAufgabe5Tb.h"


/* String declarations */
static std::string const __str_literal_6("%d Wrong Data expected: %d got: %d", 34u);
static std::string const __str_literal_8("Error: \"Aufgabe5Tb.bsv\", line 13, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l13c13] and\n  [RL_action_l14c13, RL_action_l20c16, RL_action_l21c13,\n  RL_action_r_init_l27c13, RL_action_l27c25, RL_action_f_init_l33c13,\n  RL_action_r_init_l34c17, RL_action_l34c29, RL_action_f_update_l33c13,\n  RL_action_r_init_l41c13, RL_action_l41c25] ) fired in the same clock cycle.\n",
					 398u);
static std::string const __str_literal_9("Error: \"Aufgabe5Tb.bsv\", line 14, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l14c13] and\n  [RL_action_l20c16, RL_action_l21c13, RL_action_r_init_l27c13,\n  RL_action_l27c25, RL_action_f_init_l33c13, RL_action_r_init_l34c17,\n  RL_action_l34c29, RL_action_f_update_l33c13, RL_action_r_init_l41c13,\n  RL_action_l41c25] ) fired in the same clock cycle.\n",
					 380u);
static std::string const __str_literal_10("Error: \"Aufgabe5Tb.bsv\", line 20, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l20c16] and\n  [RL_action_l21c13, RL_action_r_init_l27c13, RL_action_l27c25,\n  RL_action_f_init_l33c13, RL_action_r_init_l34c17, RL_action_l34c29,\n  RL_action_f_update_l33c13, RL_action_r_init_l41c13, RL_action_l41c25] )\n  fired in the same clock cycle.\n",
					  362u);
static std::string const __str_literal_11("Error: \"Aufgabe5Tb.bsv\", line 21, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l21c13] and\n  [RL_action_r_init_l27c13, RL_action_l27c25, RL_action_f_init_l33c13,\n  RL_action_r_init_l34c17, RL_action_l34c29, RL_action_f_update_l33c13,\n  RL_action_r_init_l41c13, RL_action_l41c25] ) fired in the same clock cycle.\n",
					  342u);
static std::string const __str_literal_12("Error: \"Aufgabe5Tb.bsv\", line 27, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l27c13] and\n  [RL_action_l27c25, RL_action_f_init_l33c13, RL_action_r_init_l34c17,\n  RL_action_l34c29, RL_action_f_update_l33c13, RL_action_r_init_l41c13,\n  RL_action_l41c25] ) fired in the same clock cycle.\n",
					  324u);
static std::string const __str_literal_13("Error: \"Aufgabe5Tb.bsv\", line 27, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l27c25] and\n  [RL_action_f_init_l33c13, RL_action_r_init_l34c17, RL_action_l34c29,\n  RL_action_f_update_l33c13, RL_action_r_init_l41c13, RL_action_l41c25] )\n  fired in the same clock cycle.\n",
					  299u);
static std::string const __str_literal_14("Error: \"Aufgabe5Tb.bsv\", line 33, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l33c13] and\n  [RL_action_r_init_l34c17, RL_action_l34c29, RL_action_f_update_l33c13,\n  RL_action_r_init_l41c13, RL_action_l41c25] ) fired in the same clock cycle.\n",
					  279u);
static std::string const __str_literal_17("Error: \"Aufgabe5Tb.bsv\", line 33, column 52: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_update_l33c13] and\n  [RL_action_r_init_l41c13, RL_action_l41c25] ) fired in the same clock cycle.\n",
					  209u);
static std::string const __str_literal_15("Error: \"Aufgabe5Tb.bsv\", line 34, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l34c17] and\n  [RL_action_l34c29, RL_action_f_update_l33c13, RL_action_r_init_l41c13,\n  RL_action_l41c25] ) fired in the same clock cycle.\n",
					  254u);
static std::string const __str_literal_16("Error: \"Aufgabe5Tb.bsv\", line 34, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l34c29] and\n  [RL_action_f_update_l33c13, RL_action_r_init_l41c13, RL_action_l41c25] )\n  fired in the same clock cycle.\n",
					  229u);
static std::string const __str_literal_18("Error: \"Aufgabe5Tb.bsv\", line 41, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l41c13] and\n  [RL_action_l41c25] ) fired in the same clock cycle.\n",
					  182u);
static std::string const __str_literal_2("StartTB ...", 11u);
static std::string const __str_literal_1("TX: Got data", 12u);
static std::string const __str_literal_4("Waiting for Data to be sent ...", 31u);
static std::string const __str_literal_5("Wrong Data Notification!", 24u);
static std::string const __str_literal_7("Wrong END Bit: 1 got: ", 22u);
static std::string const __str_literal_3("Wrong Idle Output!", 18u);


/* Constructor */
MOD_mkAufgabe5Tb::MOD_mkAufgabe5Tb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    INST_dut_counter(simHdl, "dut_counter", this, 32u, 0u, (tUInt8)0u),
    INST_dut_currentData(simHdl, "dut_currentData", this, 8u),
    INST_dut_dataIn(simHdl, "dut_dataIn", this, 8u, 2u, (tUInt8)1u, 0u),
    INST_dut_pinData(simHdl, "dut_pinData", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_dut_pointer(simHdl, "dut_pointer", this, 32u, 0u, (tUInt8)0u),
    INST_dut_states(simHdl, "dut_states", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_jj_1_repeat_count(simHdl, "jj_1_repeat_count", this, 16u, 1u, (tUInt8)0u),
    INST_jj_2_repeat_count(simHdl, "jj_2_repeat_count", this, 16u, 1u, (tUInt8)0u),
    INST_jj_repeat_count(simHdl, "jj_repeat_count", this, 16u, 1u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 5u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 75u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAufgabe5Tb::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_12", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_13", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_14", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_15", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_16", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_17", SYM_RULE);
  init_symbol(&symbols[8u], "__me_check_18", SYM_RULE);
  init_symbol(&symbols[9u], "__me_check_19", SYM_RULE);
  init_symbol(&symbols[10u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[11u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[12u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[13u], "dut_counter", SYM_MODULE, &INST_dut_counter);
  init_symbol(&symbols[14u], "dut_currentData", SYM_MODULE, &INST_dut_currentData);
  init_symbol(&symbols[15u], "dut_dataIn", SYM_MODULE, &INST_dut_dataIn);
  init_symbol(&symbols[16u], "dut_pinData", SYM_MODULE, &INST_dut_pinData);
  init_symbol(&symbols[17u], "dut_pointer", SYM_MODULE, &INST_dut_pointer);
  init_symbol(&symbols[18u], "dut_states", SYM_MODULE, &INST_dut_states);
  init_symbol(&symbols[19u], "jj_1_repeat_count", SYM_MODULE, &INST_jj_1_repeat_count);
  init_symbol(&symbols[20u], "jj_2_repeat_count", SYM_MODULE, &INST_jj_2_repeat_count);
  init_symbol(&symbols[21u], "jj_repeat_count", SYM_MODULE, &INST_jj_repeat_count);
  init_symbol(&symbols[22u], "RL_action_f_init_l33c13", SYM_RULE);
  init_symbol(&symbols[23u], "RL_action_f_update_l33c13", SYM_RULE);
  init_symbol(&symbols[24u], "RL_action_l13c13", SYM_RULE);
  init_symbol(&symbols[25u], "RL_action_l14c13", SYM_RULE);
  init_symbol(&symbols[26u], "RL_action_l20c16", SYM_RULE);
  init_symbol(&symbols[27u], "RL_action_l21c13", SYM_RULE);
  init_symbol(&symbols[28u], "RL_action_l27c25", SYM_RULE);
  init_symbol(&symbols[29u], "RL_action_l34c29", SYM_RULE);
  init_symbol(&symbols[30u], "RL_action_l41c25", SYM_RULE);
  init_symbol(&symbols[31u], "RL_action_ovlp_r_update_l27c13", SYM_RULE);
  init_symbol(&symbols[32u], "RL_action_ovlp_r_update_l34c17", SYM_RULE);
  init_symbol(&symbols[33u], "RL_action_ovlp_r_update_l41c13", SYM_RULE);
  init_symbol(&symbols[34u], "RL_action_r_init_l27c13", SYM_RULE);
  init_symbol(&symbols[35u], "RL_action_r_init_l34c17", SYM_RULE);
  init_symbol(&symbols[36u], "RL_action_r_init_l41c13", SYM_RULE);
  init_symbol(&symbols[37u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[38u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[39u], "RL_dut_r1", SYM_RULE);
  init_symbol(&symbols[40u], "RL_dut_r2", SYM_RULE);
  init_symbol(&symbols[41u], "RL_dut_r3", SYM_RULE);
  init_symbol(&symbols[42u], "RL_dut_r4", SYM_RULE);
  init_symbol(&symbols[43u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[44u], "RL_idle_l12c18", SYM_RULE);
  init_symbol(&symbols[45u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[46u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[47u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[48u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[49u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[50u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[51u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[52u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[53u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[54u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[55u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[56u], "state_can_overlap__h7146", SYM_DEF, &DEF_state_can_overlap__h7146, 1u);
  init_symbol(&symbols[57u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[58u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[59u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[60u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[61u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[62u],
	      "WILL_FIRE_RL_action_f_init_l33c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_init_l33c13,
	      1u);
  init_symbol(&symbols[63u],
	      "WILL_FIRE_RL_action_f_update_l33c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_update_l33c13,
	      1u);
  init_symbol(&symbols[64u],
	      "WILL_FIRE_RL_action_l13c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l13c13,
	      1u);
  init_symbol(&symbols[65u],
	      "WILL_FIRE_RL_action_l14c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l14c13,
	      1u);
  init_symbol(&symbols[66u],
	      "WILL_FIRE_RL_action_l20c16",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l20c16,
	      1u);
  init_symbol(&symbols[67u],
	      "WILL_FIRE_RL_action_l21c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l21c13,
	      1u);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_RL_action_l27c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l27c25,
	      1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_RL_action_l34c29",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l34c29,
	      1u);
  init_symbol(&symbols[70u],
	      "WILL_FIRE_RL_action_l41c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l41c25,
	      1u);
  init_symbol(&symbols[71u],
	      "WILL_FIRE_RL_action_r_init_l27c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l27c13,
	      1u);
  init_symbol(&symbols[72u],
	      "WILL_FIRE_RL_action_r_init_l34c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l34c17,
	      1u);
  init_symbol(&symbols[73u],
	      "WILL_FIRE_RL_action_r_init_l41c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l41c13,
	      1u);
  init_symbol(&symbols[74u], "x__h74240", SYM_DEF, &DEF_x__h74240, 32u);
}


/* Rule actions */

void MOD_mkAufgabe5Tb::RL_dut_r1()
{
  tUInt8 DEF_data__h557;
  DEF_data__h557 = INST_dut_dataIn.METH_first();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
  INST_dut_states.METH_write((tUInt8)1u);
  INST_dut_pinData.METH_port0__write((tUInt8)0u);
  INST_dut_dataIn.METH_deq();
  INST_dut_counter.METH_write(1u);
  INST_dut_currentData.METH_write(DEF_data__h557);
}

void MOD_mkAufgabe5Tb::RL_dut_r2()
{
  tUInt8 DEF_x1__h739;
  tUInt8 DEF_dut_pointer_3_BITS_2_TO_0___d14;
  DEF_b__h636 = INST_dut_counter.METH_read();
  DEF_x__h777 = INST_dut_pointer.METH_read();
  DEF_bs__h862 = INST_dut_currentData.METH_read();
  DEF_dut_pointer_3_BITS_2_TO_0___d14 = (tUInt8)((tUInt8)7u & DEF_x__h777);
  DEF_x1__h739 = primExtract8(1u,
			      8u,
			      (tUInt8)(DEF_bs__h862),
			      3u,
			      (tUInt8)(DEF_dut_pointer_3_BITS_2_TO_0___d14),
			      3u,
			      (tUInt8)(DEF_dut_pointer_3_BITS_2_TO_0___d14));
  DEF_dut_counter_SLT_16___d8 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h636), 32u, 16u);
  DEF_dut_counter_PLUS_1___d9 = DEF_b__h636 + 1u;
  DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10 = DEF_dut_counter_SLT_16___d8 ? DEF_dut_counter_PLUS_1___d9 : 1u;
  DEF_NOT_dut_counter_SLT_16___d11 = !DEF_dut_counter_SLT_16___d8;
  INST_dut_counter.METH_write(DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_states.METH_write((tUInt8)2u);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_pinData.METH_port0__write(DEF_x1__h739);
}

void MOD_mkAufgabe5Tb::RL_dut_r3()
{
  tUInt8 DEF_NOT_dut_counter_SLT_16_1_AND_dut_pointer_3_EQ_7_0___d21;
  tUInt8 DEF_x1__h856;
  tUInt32 DEF_dut_pointer_3_PLUS_1___d17;
  tUInt8 DEF_dut_pointer_3_PLUS_1_7_BITS_2_TO_0___d18;
  DEF_b__h636 = INST_dut_counter.METH_read();
  DEF_x__h777 = INST_dut_pointer.METH_read();
  DEF_bs__h862 = INST_dut_currentData.METH_read();
  DEF_dut_pointer_3_PLUS_1___d17 = DEF_x__h777 + 1u;
  DEF_dut_pointer_3_PLUS_1_7_BITS_2_TO_0___d18 = (tUInt8)((tUInt8)7u & DEF_dut_pointer_3_PLUS_1___d17);
  DEF_x1__h856 = primExtract8(1u,
			      8u,
			      (tUInt8)(DEF_bs__h862),
			      3u,
			      (tUInt8)(DEF_dut_pointer_3_PLUS_1_7_BITS_2_TO_0___d18),
			      3u,
			      (tUInt8)(DEF_dut_pointer_3_PLUS_1_7_BITS_2_TO_0___d18));
  DEF_dut_counter_SLT_16___d8 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h636), 32u, 16u);
  DEF_dut_counter_PLUS_1___d9 = DEF_b__h636 + 1u;
  DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10 = DEF_dut_counter_SLT_16___d8 ? DEF_dut_counter_PLUS_1___d9 : 1u;
  DEF_NOT_dut_counter_SLT_16___d11 = !DEF_dut_counter_SLT_16___d8;
  DEF_NOT_dut_counter_SLT_16_1_AND_dut_pointer_3_EQ_7_0___d21 = DEF_NOT_dut_counter_SLT_16___d11 && DEF_x__h777 == 7u;
  INST_dut_counter.METH_write(DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_pinData.METH_port0__write(DEF_x1__h856);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_pointer.METH_write(DEF_dut_pointer_3_PLUS_1___d17);
  if (DEF_NOT_dut_counter_SLT_16_1_AND_dut_pointer_3_EQ_7_0___d21)
    INST_dut_states.METH_write((tUInt8)3u);
}

void MOD_mkAufgabe5Tb::RL_dut_r4()
{
  tUInt32 DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d23;
  DEF_b__h636 = INST_dut_counter.METH_read();
  DEF_dut_counter_SLT_16___d8 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h636), 32u, 16u);
  DEF_dut_counter_PLUS_1___d9 = DEF_b__h636 + 1u;
  DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d23 = DEF_dut_counter_SLT_16___d8 ? DEF_dut_counter_PLUS_1___d9 : 0u;
  DEF_NOT_dut_counter_SLT_16___d11 = !DEF_dut_counter_SLT_16___d8;
  INST_dut_counter.METH_write(DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d23);
  INST_dut_pinData.METH_port0__write((tUInt8)1u);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_pointer.METH_write(0u);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_currentData.METH_write((tUInt8)0u);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_states.METH_write((tUInt8)0u);
}

void MOD_mkAufgabe5Tb::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d26;
  DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d26 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d26);
}

void MOD_mkAufgabe5Tb::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkAufgabe5Tb::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d38;
  DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d38 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d38);
}

void MOD_mkAufgabe5Tb::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d44;
  DEF_state_can_overlap__h7146 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d44 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h7146);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d44);
}

void MOD_mkAufgabe5Tb::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkAufgabe5Tb::RL_action_l13c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkAufgabe5Tb::RL_action_l14c13()
{
  DEF_dut_pinData_port1__read____d69 = INST_dut_pinData.METH_port1__read();
  DEF_NOT_dut_pinData_port1__read__9___d70 = !DEF_dut_pinData_port1__read____d69;
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_pinData_port1__read__9___d70)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkAufgabe5Tb::RL_action_l20c16()
{
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_dut_dataIn.METH_enq((tUInt8)170u);
}

void MOD_mkAufgabe5Tb::RL_action_l21c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkAufgabe5Tb::RL_action_r_init_l27c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_repeat_count.METH_write(1u);
}

void MOD_mkAufgabe5Tb::RL_action_l27c25()
{
  DEF_dut_pinData_port1__read____d69 = INST_dut_pinData.METH_port1__read();
  INST_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_dut_pinData_port1__read____d69)
      dollar_display(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkAufgabe5Tb::RL_action_f_init_l33c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)9u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_counter.METH_write(0u);
}

void MOD_mkAufgabe5Tb::RL_action_r_init_l34c17()
{
  INST_state_mkFSMstate.METH_write((tUInt8)10u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_1_repeat_count.METH_write(1u);
}

void MOD_mkAufgabe5Tb::RL_action_l34c29()
{
  tUInt8 DEF_NOT_dut_pinData_port1__read__9_EQ_0b10101010_B_ETC___d128;
  tUInt8 DEF__0b10101010_BIT_counter_7_BITS_2_TO_0_25___d126;
  tUInt8 DEF_counter_7_BITS_2_TO_0___d125;
  tUInt32 DEF_signed_counter_7___d129;
  DEF_x__h74240 = INST_counter.METH_read();
  DEF_signed_counter_7___d129 = DEF_x__h74240;
  DEF_dut_pinData_port1__read____d69 = INST_dut_pinData.METH_port1__read();
  DEF_counter_7_BITS_2_TO_0___d125 = (tUInt8)((tUInt8)7u & DEF_x__h74240);
  DEF__0b10101010_BIT_counter_7_BITS_2_TO_0_25___d126 = primExtract8(1u,
								     8u,
								     (tUInt8)170u,
								     3u,
								     (tUInt8)(DEF_counter_7_BITS_2_TO_0___d125),
								     3u,
								     (tUInt8)(DEF_counter_7_BITS_2_TO_0___d125));
  DEF_NOT_dut_pinData_port1__read__9_EQ_0b10101010_B_ETC___d128 = !(DEF_dut_pinData_port1__read____d69 == DEF__0b10101010_BIT_counter_7_BITS_2_TO_0_25___d126);
  INST_state_mkFSMstate.METH_write((tUInt8)12u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_pinData_port1__read__9_EQ_0b10101010_B_ETC___d128)
      dollar_display(sim_hdl,
		     this,
		     "s,-32,1,1",
		     &__str_literal_6,
		     DEF_signed_counter_7___d129,
		     DEF__0b10101010_BIT_counter_7_BITS_2_TO_0_25___d126,
		     DEF_dut_pinData_port1__read____d69);
}

void MOD_mkAufgabe5Tb::RL_action_f_update_l33c13()
{
  tUInt32 DEF_counter_7_PLUS_1___d131;
  DEF_x__h74240 = INST_counter.METH_read();
  DEF_counter_7_PLUS_1___d131 = DEF_x__h74240 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)14u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_counter.METH_write(DEF_counter_7_PLUS_1___d131);
}

void MOD_mkAufgabe5Tb::RL_action_r_init_l41c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)15u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_2_repeat_count.METH_write(1u);
}

void MOD_mkAufgabe5Tb::RL_action_l41c25()
{
  DEF_dut_pinData_port1__read____d69 = INST_dut_pinData.METH_port1__read();
  DEF_NOT_dut_pinData_port1__read__9___d70 = !DEF_dut_pinData_port1__read____d69;
  INST_state_mkFSMstate.METH_write((tUInt8)17u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_pinData_port1__read__9___d70)
      dollar_display(sim_hdl, this, "s,1", &__str_literal_7, DEF_dut_pinData_port1__read____d69);
}

void MOD_mkAufgabe5Tb::RL_action_ovlp_r_update_l27c13()
{
  tUInt32 DEF_x__h76533;
  tUInt32 DEF_IF_jj_repeat_count_read__8_BIT_15_48_THEN_1_EL_ETC___d151;
  DEF_jj_repeat_count_read____d78 = INST_jj_repeat_count.METH_read();
  DEF_x__h76533 = 65535u & ((((tUInt32)(32767u & DEF_jj_repeat_count_read____d78)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_repeat_count_read__8_BIT_15_48_THEN_1_EL_ETC___d151 = (tUInt8)(DEF_jj_repeat_count_read____d78 >> 15u) ? 1u : DEF_x__h76533;
  INST_state_overlap_pw.METH_wset();
  INST_jj_repeat_count.METH_write(DEF_IF_jj_repeat_count_read__8_BIT_15_48_THEN_1_EL_ETC___d151);
}

void MOD_mkAufgabe5Tb::RL_action_ovlp_r_update_l34c17()
{
  tUInt32 DEF_x__h76747;
  tUInt32 DEF_IF_jj_1_repeat_count_read__9_BIT_15_55_THEN_1__ETC___d158;
  DEF_jj_1_repeat_count_read____d99 = INST_jj_1_repeat_count.METH_read();
  DEF_x__h76747 = 65535u & ((((tUInt32)(32767u & DEF_jj_1_repeat_count_read____d99)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_1_repeat_count_read__9_BIT_15_55_THEN_1__ETC___d158 = (tUInt8)(DEF_jj_1_repeat_count_read____d99 >> 15u) ? 1u : DEF_x__h76747;
  INST_state_overlap_pw.METH_wset();
  INST_jj_1_repeat_count.METH_write(DEF_IF_jj_1_repeat_count_read__9_BIT_15_55_THEN_1__ETC___d158);
}

void MOD_mkAufgabe5Tb::RL_action_ovlp_r_update_l41c13()
{
  tUInt32 DEF_x__h76960;
  tUInt32 DEF_IF_jj_2_repeat_count_read__9_BIT_15_63_THEN_1__ETC___d166;
  DEF_jj_2_repeat_count_read____d59 = INST_jj_2_repeat_count.METH_read();
  DEF_x__h76960 = 65535u & ((((tUInt32)(32767u & DEF_jj_2_repeat_count_read____d59)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_2_repeat_count_read__9_BIT_15_63_THEN_1__ETC___d166 = (tUInt8)(DEF_jj_2_repeat_count_read____d59 >> 15u) ? 1u : DEF_x__h76960;
  INST_state_overlap_pw.METH_wset();
  INST_jj_2_repeat_count.METH_write(DEF_IF_jj_2_repeat_count_read__9_BIT_15_63_THEN_1__ETC___d166);
}

void MOD_mkAufgabe5Tb::RL_idle_l12c18()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkAufgabe5Tb::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkAufgabe5Tb::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkAufgabe5Tb::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkAufgabe5Tb::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l13c13 && ((((((((((DEF_WILL_FIRE_RL_action_l14c13 || DEF_WILL_FIRE_RL_action_l20c16) || DEF_WILL_FIRE_RL_action_l21c13) || DEF_WILL_FIRE_RL_action_r_init_l27c13) || DEF_WILL_FIRE_RL_action_l27c25) || DEF_WILL_FIRE_RL_action_f_init_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l34c17) || DEF_WILL_FIRE_RL_action_l34c29) || DEF_WILL_FIRE_RL_action_f_update_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l41c13) || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkAufgabe5Tb::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l14c13 && (((((((((DEF_WILL_FIRE_RL_action_l20c16 || DEF_WILL_FIRE_RL_action_l21c13) || DEF_WILL_FIRE_RL_action_r_init_l27c13) || DEF_WILL_FIRE_RL_action_l27c25) || DEF_WILL_FIRE_RL_action_f_init_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l34c17) || DEF_WILL_FIRE_RL_action_l34c29) || DEF_WILL_FIRE_RL_action_f_update_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l41c13) || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkAufgabe5Tb::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l20c16 && ((((((((DEF_WILL_FIRE_RL_action_l21c13 || DEF_WILL_FIRE_RL_action_r_init_l27c13) || DEF_WILL_FIRE_RL_action_l27c25) || DEF_WILL_FIRE_RL_action_f_init_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l34c17) || DEF_WILL_FIRE_RL_action_l34c29) || DEF_WILL_FIRE_RL_action_f_update_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l41c13) || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkAufgabe5Tb::__me_check_12()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l21c13 && (((((((DEF_WILL_FIRE_RL_action_r_init_l27c13 || DEF_WILL_FIRE_RL_action_l27c25) || DEF_WILL_FIRE_RL_action_f_init_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l34c17) || DEF_WILL_FIRE_RL_action_l34c29) || DEF_WILL_FIRE_RL_action_f_update_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l41c13) || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}

void MOD_mkAufgabe5Tb::__me_check_13()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l27c13 && ((((((DEF_WILL_FIRE_RL_action_l27c25 || DEF_WILL_FIRE_RL_action_f_init_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l34c17) || DEF_WILL_FIRE_RL_action_l34c29) || DEF_WILL_FIRE_RL_action_f_update_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l41c13) || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
}

void MOD_mkAufgabe5Tb::__me_check_14()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l27c25 && (((((DEF_WILL_FIRE_RL_action_f_init_l33c13 || DEF_WILL_FIRE_RL_action_r_init_l34c17) || DEF_WILL_FIRE_RL_action_l34c29) || DEF_WILL_FIRE_RL_action_f_update_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l41c13) || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
}

void MOD_mkAufgabe5Tb::__me_check_15()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_init_l33c13 && ((((DEF_WILL_FIRE_RL_action_r_init_l34c17 || DEF_WILL_FIRE_RL_action_l34c29) || DEF_WILL_FIRE_RL_action_f_update_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l41c13) || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_14);
}

void MOD_mkAufgabe5Tb::__me_check_16()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l34c17 && (((DEF_WILL_FIRE_RL_action_l34c29 || DEF_WILL_FIRE_RL_action_f_update_l33c13) || DEF_WILL_FIRE_RL_action_r_init_l41c13) || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_15);
}

void MOD_mkAufgabe5Tb::__me_check_17()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l34c29 && ((DEF_WILL_FIRE_RL_action_f_update_l33c13 || DEF_WILL_FIRE_RL_action_r_init_l41c13) || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_16);
}

void MOD_mkAufgabe5Tb::__me_check_18()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_update_l33c13 && (DEF_WILL_FIRE_RL_action_r_init_l41c13 || DEF_WILL_FIRE_RL_action_l41c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_17);
}

void MOD_mkAufgabe5Tb::__me_check_19()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l41c13 && DEF_WILL_FIRE_RL_action_l41c25)
      dollar_error(sim_hdl, this, "s", &__str_literal_18);
}


/* Methods */


/* Reset routines */

void MOD_mkAufgabe5Tb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_jj_repeat_count.reset_RST(ARG_rst_in);
  INST_jj_2_repeat_count.reset_RST(ARG_rst_in);
  INST_jj_1_repeat_count.reset_RST(ARG_rst_in);
  INST_dut_states.reset_RST(ARG_rst_in);
  INST_dut_pointer.reset_RST(ARG_rst_in);
  INST_dut_pinData.reset_RST(ARG_rst_in);
  INST_dut_dataIn.reset_RST(ARG_rst_in);
  INST_dut_counter.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAufgabe5Tb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAufgabe5Tb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_counter.dump_state(indent + 2u);
  INST_dut_counter.dump_state(indent + 2u);
  INST_dut_currentData.dump_state(indent + 2u);
  INST_dut_dataIn.dump_state(indent + 2u);
  INST_dut_pinData.dump_state(indent + 2u);
  INST_dut_pointer.dump_state(indent + 2u);
  INST_dut_states.dump_state(indent + 2u);
  INST_jj_1_repeat_count.dump_state(indent + 2u);
  INST_jj_2_repeat_count.dump_state(indent + 2u);
  INST_jj_repeat_count.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAufgabe5Tb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 49u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_dut_counter_SLT_16___d11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_dut_pinData_port1__read__9___d70", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_init_l33c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_update_l33c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l13c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l14c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l20c16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l21c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l27c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l34c29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l41c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l27c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l34c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l41c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h636", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bs__h862", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_counter_PLUS_1___d9", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_counter_SLT_16___d8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_pinData_port1__read____d69", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_1_repeat_count_read____d99", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_2_repeat_count_read____d59", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_repeat_count_read____d78", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "state_can_overlap__h7146", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h74240", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h777", 32u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_dut_counter.dump_VCD_defs(num);
  num = INST_dut_currentData.dump_VCD_defs(num);
  num = INST_dut_dataIn.dump_VCD_defs(num);
  num = INST_dut_pinData.dump_VCD_defs(num);
  num = INST_dut_pointer.dump_VCD_defs(num);
  num = INST_dut_states.dump_VCD_defs(num);
  num = INST_jj_1_repeat_count.dump_VCD_defs(num);
  num = INST_jj_2_repeat_count.dump_VCD_defs(num);
  num = INST_jj_repeat_count.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAufgabe5Tb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAufgabe5Tb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkAufgabe5Tb::vcd_defs(tVCDDumpType dt, MOD_mkAufgabe5Tb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10) != DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10, 32u);
	backing.DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10 = DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10;
      }
      ++num;
      if ((backing.DEF_NOT_dut_counter_SLT_16___d11) != DEF_NOT_dut_counter_SLT_16___d11)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_dut_counter_SLT_16___d11, 1u);
	backing.DEF_NOT_dut_counter_SLT_16___d11 = DEF_NOT_dut_counter_SLT_16___d11;
      }
      ++num;
      if ((backing.DEF_NOT_dut_pinData_port1__read__9___d70) != DEF_NOT_dut_pinData_port1__read__9___d70)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_dut_pinData_port1__read__9___d70, 1u);
	backing.DEF_NOT_dut_pinData_port1__read__9___d70 = DEF_NOT_dut_pinData_port1__read__9___d70;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_init_l33c13) != DEF_WILL_FIRE_RL_action_f_init_l33c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_init_l33c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_init_l33c13 = DEF_WILL_FIRE_RL_action_f_init_l33c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_update_l33c13) != DEF_WILL_FIRE_RL_action_f_update_l33c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_update_l33c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_update_l33c13 = DEF_WILL_FIRE_RL_action_f_update_l33c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l13c13) != DEF_WILL_FIRE_RL_action_l13c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l13c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l13c13 = DEF_WILL_FIRE_RL_action_l13c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l14c13) != DEF_WILL_FIRE_RL_action_l14c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l14c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l14c13 = DEF_WILL_FIRE_RL_action_l14c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l20c16) != DEF_WILL_FIRE_RL_action_l20c16)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l20c16, 1u);
	backing.DEF_WILL_FIRE_RL_action_l20c16 = DEF_WILL_FIRE_RL_action_l20c16;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l21c13) != DEF_WILL_FIRE_RL_action_l21c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l21c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l21c13 = DEF_WILL_FIRE_RL_action_l21c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l27c25) != DEF_WILL_FIRE_RL_action_l27c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l27c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_l27c25 = DEF_WILL_FIRE_RL_action_l27c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l34c29) != DEF_WILL_FIRE_RL_action_l34c29)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l34c29, 1u);
	backing.DEF_WILL_FIRE_RL_action_l34c29 = DEF_WILL_FIRE_RL_action_l34c29;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l41c25) != DEF_WILL_FIRE_RL_action_l41c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l41c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_l41c25 = DEF_WILL_FIRE_RL_action_l41c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l27c13) != DEF_WILL_FIRE_RL_action_r_init_l27c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l27c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l27c13 = DEF_WILL_FIRE_RL_action_r_init_l27c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l34c17) != DEF_WILL_FIRE_RL_action_r_init_l34c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l34c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l34c17 = DEF_WILL_FIRE_RL_action_r_init_l34c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l41c13) != DEF_WILL_FIRE_RL_action_r_init_l41c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l41c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l41c13 = DEF_WILL_FIRE_RL_action_r_init_l41c13;
      }
      ++num;
      if ((backing.DEF_b__h636) != DEF_b__h636)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h636, 32u);
	backing.DEF_b__h636 = DEF_b__h636;
      }
      ++num;
      if ((backing.DEF_bs__h862) != DEF_bs__h862)
      {
	vcd_write_val(sim_hdl, num, DEF_bs__h862, 8u);
	backing.DEF_bs__h862 = DEF_bs__h862;
      }
      ++num;
      if ((backing.DEF_dut_counter_PLUS_1___d9) != DEF_dut_counter_PLUS_1___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_counter_PLUS_1___d9, 32u);
	backing.DEF_dut_counter_PLUS_1___d9 = DEF_dut_counter_PLUS_1___d9;
      }
      ++num;
      if ((backing.DEF_dut_counter_SLT_16___d8) != DEF_dut_counter_SLT_16___d8)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_counter_SLT_16___d8, 1u);
	backing.DEF_dut_counter_SLT_16___d8 = DEF_dut_counter_SLT_16___d8;
      }
      ++num;
      if ((backing.DEF_dut_pinData_port1__read____d69) != DEF_dut_pinData_port1__read____d69)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_pinData_port1__read____d69, 1u);
	backing.DEF_dut_pinData_port1__read____d69 = DEF_dut_pinData_port1__read____d69;
      }
      ++num;
      if ((backing.DEF_jj_1_repeat_count_read____d99) != DEF_jj_1_repeat_count_read____d99)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_1_repeat_count_read____d99, 16u);
	backing.DEF_jj_1_repeat_count_read____d99 = DEF_jj_1_repeat_count_read____d99;
      }
      ++num;
      if ((backing.DEF_jj_2_repeat_count_read____d59) != DEF_jj_2_repeat_count_read____d59)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_2_repeat_count_read____d59, 16u);
	backing.DEF_jj_2_repeat_count_read____d59 = DEF_jj_2_repeat_count_read____d59;
      }
      ++num;
      if ((backing.DEF_jj_repeat_count_read____d78) != DEF_jj_repeat_count_read____d78)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_repeat_count_read____d78, 16u);
	backing.DEF_jj_repeat_count_read____d78 = DEF_jj_repeat_count_read____d78;
      }
      ++num;
      if ((backing.DEF_state_can_overlap__h7146) != DEF_state_can_overlap__h7146)
      {
	vcd_write_val(sim_hdl, num, DEF_state_can_overlap__h7146, 1u);
	backing.DEF_state_can_overlap__h7146 = DEF_state_can_overlap__h7146;
      }
      ++num;
      if ((backing.DEF_x__h74240) != DEF_x__h74240)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h74240, 32u);
	backing.DEF_x__h74240 = DEF_x__h74240;
      }
      ++num;
      if ((backing.DEF_x__h777) != DEF_x__h777)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h777, 32u);
	backing.DEF_x__h777 = DEF_x__h777;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10, 32u);
      backing.DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10 = DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10;
      vcd_write_val(sim_hdl, num++, DEF_NOT_dut_counter_SLT_16___d11, 1u);
      backing.DEF_NOT_dut_counter_SLT_16___d11 = DEF_NOT_dut_counter_SLT_16___d11;
      vcd_write_val(sim_hdl, num++, DEF_NOT_dut_pinData_port1__read__9___d70, 1u);
      backing.DEF_NOT_dut_pinData_port1__read__9___d70 = DEF_NOT_dut_pinData_port1__read__9___d70;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_init_l33c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_init_l33c13 = DEF_WILL_FIRE_RL_action_f_init_l33c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_update_l33c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_update_l33c13 = DEF_WILL_FIRE_RL_action_f_update_l33c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l13c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l13c13 = DEF_WILL_FIRE_RL_action_l13c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l14c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l14c13 = DEF_WILL_FIRE_RL_action_l14c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l20c16, 1u);
      backing.DEF_WILL_FIRE_RL_action_l20c16 = DEF_WILL_FIRE_RL_action_l20c16;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l21c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l21c13 = DEF_WILL_FIRE_RL_action_l21c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l27c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_l27c25 = DEF_WILL_FIRE_RL_action_l27c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l34c29, 1u);
      backing.DEF_WILL_FIRE_RL_action_l34c29 = DEF_WILL_FIRE_RL_action_l34c29;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l41c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_l41c25 = DEF_WILL_FIRE_RL_action_l41c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l27c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l27c13 = DEF_WILL_FIRE_RL_action_r_init_l27c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l34c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l34c17 = DEF_WILL_FIRE_RL_action_r_init_l34c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l41c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l41c13 = DEF_WILL_FIRE_RL_action_r_init_l41c13;
      vcd_write_val(sim_hdl, num++, DEF_b__h636, 32u);
      backing.DEF_b__h636 = DEF_b__h636;
      vcd_write_val(sim_hdl, num++, DEF_bs__h862, 8u);
      backing.DEF_bs__h862 = DEF_bs__h862;
      vcd_write_val(sim_hdl, num++, DEF_dut_counter_PLUS_1___d9, 32u);
      backing.DEF_dut_counter_PLUS_1___d9 = DEF_dut_counter_PLUS_1___d9;
      vcd_write_val(sim_hdl, num++, DEF_dut_counter_SLT_16___d8, 1u);
      backing.DEF_dut_counter_SLT_16___d8 = DEF_dut_counter_SLT_16___d8;
      vcd_write_val(sim_hdl, num++, DEF_dut_pinData_port1__read____d69, 1u);
      backing.DEF_dut_pinData_port1__read____d69 = DEF_dut_pinData_port1__read____d69;
      vcd_write_val(sim_hdl, num++, DEF_jj_1_repeat_count_read____d99, 16u);
      backing.DEF_jj_1_repeat_count_read____d99 = DEF_jj_1_repeat_count_read____d99;
      vcd_write_val(sim_hdl, num++, DEF_jj_2_repeat_count_read____d59, 16u);
      backing.DEF_jj_2_repeat_count_read____d59 = DEF_jj_2_repeat_count_read____d59;
      vcd_write_val(sim_hdl, num++, DEF_jj_repeat_count_read____d78, 16u);
      backing.DEF_jj_repeat_count_read____d78 = DEF_jj_repeat_count_read____d78;
      vcd_write_val(sim_hdl, num++, DEF_state_can_overlap__h7146, 1u);
      backing.DEF_state_can_overlap__h7146 = DEF_state_can_overlap__h7146;
      vcd_write_val(sim_hdl, num++, DEF_x__h74240, 32u);
      backing.DEF_x__h74240 = DEF_x__h74240;
      vcd_write_val(sim_hdl, num++, DEF_x__h777, 32u);
      backing.DEF_x__h777 = DEF_x__h777;
    }
}

void MOD_mkAufgabe5Tb::vcd_prims(tVCDDumpType dt, MOD_mkAufgabe5Tb &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_dut_counter.dump_VCD(dt, backing.INST_dut_counter);
  INST_dut_currentData.dump_VCD(dt, backing.INST_dut_currentData);
  INST_dut_dataIn.dump_VCD(dt, backing.INST_dut_dataIn);
  INST_dut_pinData.dump_VCD(dt, backing.INST_dut_pinData);
  INST_dut_pointer.dump_VCD(dt, backing.INST_dut_pointer);
  INST_dut_states.dump_VCD(dt, backing.INST_dut_states);
  INST_jj_1_repeat_count.dump_VCD(dt, backing.INST_jj_1_repeat_count);
  INST_jj_2_repeat_count.dump_VCD(dt, backing.INST_jj_2_repeat_count);
  INST_jj_repeat_count.dump_VCD(dt, backing.INST_jj_repeat_count);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
