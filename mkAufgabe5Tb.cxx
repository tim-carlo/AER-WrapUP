/*
 * Generated by Bluespec Compiler, version 2023.07-7-g527eaa0b (build 527eaa0b)
 * 
 * On Sun Feb 11 11:46:22 UTC 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkAufgabe5Tb.h"


/* String declarations */
static std::string const __str_literal_7("%d Wrong Data expected: %d got: %d  Time: %d", 44u);
static std::string const __str_literal_9("Code executed with %d Mistakes!", 31u);
static std::string const __str_literal_6("Data: %d ... Fetching Data from Tackt: %d", 41u);
static std::string const __str_literal_10("Error: \"Aufgabe5Tb.bsv\", line 14, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l14c13] and\n  [RL_action_l15c13, RL_action_l22c16, RL_action_l23c13,\n  RL_action_r_init_l29c13, RL_action_l29c25, RL_action_f_init_l36c13,\n  RL_action_r_init_l37c17, RL_action_l37c29, RL_action_f_update_l36c13,\n  RL_action_r_init_l48c13, RL_action_l48c25, RL_action_l56c13] ) fired in the\n  same clock cycle.\n",
					  418u);
static std::string const __str_literal_11("Error: \"Aufgabe5Tb.bsv\", line 15, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l15c13] and\n  [RL_action_l22c16, RL_action_l23c13, RL_action_r_init_l29c13,\n  RL_action_l29c25, RL_action_f_init_l36c13, RL_action_r_init_l37c17,\n  RL_action_l37c29, RL_action_f_update_l36c13, RL_action_r_init_l48c13,\n  RL_action_l48c25, RL_action_l56c13] ) fired in the same clock cycle.\n",
					  398u);
static std::string const __str_literal_12("Error: \"Aufgabe5Tb.bsv\", line 22, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l22c16] and\n  [RL_action_l23c13, RL_action_r_init_l29c13, RL_action_l29c25,\n  RL_action_f_init_l36c13, RL_action_r_init_l37c17, RL_action_l37c29,\n  RL_action_f_update_l36c13, RL_action_r_init_l48c13, RL_action_l48c25,\n  RL_action_l56c13] ) fired in the same clock cycle.\n",
					  380u);
static std::string const __str_literal_13("Error: \"Aufgabe5Tb.bsv\", line 23, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l23c13] and\n  [RL_action_r_init_l29c13, RL_action_l29c25, RL_action_f_init_l36c13,\n  RL_action_r_init_l37c17, RL_action_l37c29, RL_action_f_update_l36c13,\n  RL_action_r_init_l48c13, RL_action_l48c25, RL_action_l56c13] ) fired in the\n  same clock cycle.\n",
					  362u);
static std::string const __str_literal_14("Error: \"Aufgabe5Tb.bsv\", line 29, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l29c13] and\n  [RL_action_l29c25, RL_action_f_init_l36c13, RL_action_r_init_l37c17,\n  RL_action_l37c29, RL_action_f_update_l36c13, RL_action_r_init_l48c13,\n  RL_action_l48c25, RL_action_l56c13] ) fired in the same clock cycle.\n",
					  342u);
static std::string const __str_literal_15("Error: \"Aufgabe5Tb.bsv\", line 29, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l29c25] and\n  [RL_action_f_init_l36c13, RL_action_r_init_l37c17, RL_action_l37c29,\n  RL_action_f_update_l36c13, RL_action_r_init_l48c13, RL_action_l48c25,\n  RL_action_l56c13] ) fired in the same clock cycle.\n",
					  317u);
static std::string const __str_literal_16("Error: \"Aufgabe5Tb.bsv\", line 36, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l36c13] and\n  [RL_action_r_init_l37c17, RL_action_l37c29, RL_action_f_update_l36c13,\n  RL_action_r_init_l48c13, RL_action_l48c25, RL_action_l56c13] ) fired in the\n  same clock cycle.\n",
					  299u);
static std::string const __str_literal_19("Error: \"Aufgabe5Tb.bsv\", line 36, column 52: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_update_l36c13] and\n  [RL_action_r_init_l48c13, RL_action_l48c25, RL_action_l56c13] ) fired in the\n  same clock cycle.\n",
					  229u);
static std::string const __str_literal_17("Error: \"Aufgabe5Tb.bsv\", line 37, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l37c17] and\n  [RL_action_l37c29, RL_action_f_update_l36c13, RL_action_r_init_l48c13,\n  RL_action_l48c25, RL_action_l56c13] ) fired in the same clock cycle.\n",
					  272u);
static std::string const __str_literal_18("Error: \"Aufgabe5Tb.bsv\", line 37, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l37c29] and\n  [RL_action_f_update_l36c13, RL_action_r_init_l48c13, RL_action_l48c25,\n  RL_action_l56c13] ) fired in the same clock cycle.\n",
					  247u);
static std::string const __str_literal_20("Error: \"Aufgabe5Tb.bsv\", line 48, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l48c13] and\n  [RL_action_l48c25, RL_action_l56c13] ) fired in the same clock cycle.\n",
					  200u);
static std::string const __str_literal_21("Error: \"Aufgabe5Tb.bsv\", line 48, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l48c25] and\n  [RL_action_l56c13] ) fired in the same clock cycle.\n",
					  175u);
static std::string const __str_literal_2("StartTB ...", 11u);
static std::string const __str_literal_1("TX: Got data", 12u);
static std::string const __str_literal_4("Waiting for Data to be sent ...", 31u);
static std::string const __str_literal_5("Wrong Data Notification!", 24u);
static std::string const __str_literal_8("Wrong END Bit: 1 got: ", 22u);
static std::string const __str_literal_3("Wrong Idle Output!", 18u);


/* Constructor */
MOD_mkAufgabe5Tb::MOD_mkAufgabe5Tb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    INST_dut_counter(simHdl, "dut_counter", this, 32u, 0u, (tUInt8)0u),
    INST_dut_currentData(simHdl, "dut_currentData", this, 8u),
    INST_dut_dataIn(simHdl, "dut_dataIn", this, 8u, 2u, (tUInt8)1u, 0u),
    INST_dut_pinData(simHdl, "dut_pinData", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_dut_pointer(simHdl, "dut_pointer", this, 32u, 0u, (tUInt8)0u),
    INST_dut_states(simHdl, "dut_states", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_jj_1_repeat_count(simHdl, "jj_1_repeat_count", this, 16u, 1u, (tUInt8)0u),
    INST_jj_2_repeat_count(simHdl, "jj_2_repeat_count", this, 16u, 1u, (tUInt8)0u),
    INST_jj_repeat_count(simHdl, "jj_repeat_count", this, 15u, 1u, (tUInt8)0u),
    INST_mistakes(simHdl, "mistakes", this, 32u, 0u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 5u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h75884(12297829382473034410llu),
    DEF_v__h75783(12297829382473034410llu)
{
  symbol_count = 79u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAufgabe5Tb::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_12", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_13", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_14", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_15", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_16", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_17", SYM_RULE);
  init_symbol(&symbols[8u], "__me_check_18", SYM_RULE);
  init_symbol(&symbols[9u], "__me_check_19", SYM_RULE);
  init_symbol(&symbols[10u], "__me_check_20", SYM_RULE);
  init_symbol(&symbols[11u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[12u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[13u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[14u], "dut_counter", SYM_MODULE, &INST_dut_counter);
  init_symbol(&symbols[15u], "dut_currentData", SYM_MODULE, &INST_dut_currentData);
  init_symbol(&symbols[16u], "dut_dataIn", SYM_MODULE, &INST_dut_dataIn);
  init_symbol(&symbols[17u], "dut_pinData", SYM_MODULE, &INST_dut_pinData);
  init_symbol(&symbols[18u], "dut_pointer", SYM_MODULE, &INST_dut_pointer);
  init_symbol(&symbols[19u], "dut_states", SYM_MODULE, &INST_dut_states);
  init_symbol(&symbols[20u], "jj_1_repeat_count", SYM_MODULE, &INST_jj_1_repeat_count);
  init_symbol(&symbols[21u], "jj_2_repeat_count", SYM_MODULE, &INST_jj_2_repeat_count);
  init_symbol(&symbols[22u], "jj_repeat_count", SYM_MODULE, &INST_jj_repeat_count);
  init_symbol(&symbols[23u], "mistakes", SYM_MODULE, &INST_mistakes);
  init_symbol(&symbols[24u], "RL_action_f_init_l36c13", SYM_RULE);
  init_symbol(&symbols[25u], "RL_action_f_update_l36c13", SYM_RULE);
  init_symbol(&symbols[26u], "RL_action_l14c13", SYM_RULE);
  init_symbol(&symbols[27u], "RL_action_l15c13", SYM_RULE);
  init_symbol(&symbols[28u], "RL_action_l22c16", SYM_RULE);
  init_symbol(&symbols[29u], "RL_action_l23c13", SYM_RULE);
  init_symbol(&symbols[30u], "RL_action_l29c25", SYM_RULE);
  init_symbol(&symbols[31u], "RL_action_l37c29", SYM_RULE);
  init_symbol(&symbols[32u], "RL_action_l48c25", SYM_RULE);
  init_symbol(&symbols[33u], "RL_action_l56c13", SYM_RULE);
  init_symbol(&symbols[34u], "RL_action_ovlp_r_update_l29c13", SYM_RULE);
  init_symbol(&symbols[35u], "RL_action_ovlp_r_update_l37c17", SYM_RULE);
  init_symbol(&symbols[36u], "RL_action_ovlp_r_update_l48c13", SYM_RULE);
  init_symbol(&symbols[37u], "RL_action_r_init_l29c13", SYM_RULE);
  init_symbol(&symbols[38u], "RL_action_r_init_l37c17", SYM_RULE);
  init_symbol(&symbols[39u], "RL_action_r_init_l48c13", SYM_RULE);
  init_symbol(&symbols[40u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[41u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[42u], "RL_dut_r1", SYM_RULE);
  init_symbol(&symbols[43u], "RL_dut_r2", SYM_RULE);
  init_symbol(&symbols[44u], "RL_dut_r3", SYM_RULE);
  init_symbol(&symbols[45u], "RL_dut_r4", SYM_RULE);
  init_symbol(&symbols[46u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[47u], "RL_idle_l13c18", SYM_RULE);
  init_symbol(&symbols[48u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[49u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[50u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[51u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[52u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[53u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[54u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[55u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[56u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[57u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[58u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[59u], "state_can_overlap__h7337", SYM_DEF, &DEF_state_can_overlap__h7337, 1u);
  init_symbol(&symbols[60u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[61u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[62u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[63u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[64u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[65u],
	      "WILL_FIRE_RL_action_f_init_l36c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_init_l36c13,
	      1u);
  init_symbol(&symbols[66u],
	      "WILL_FIRE_RL_action_f_update_l36c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_update_l36c13,
	      1u);
  init_symbol(&symbols[67u],
	      "WILL_FIRE_RL_action_l14c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l14c13,
	      1u);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_RL_action_l15c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l15c13,
	      1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_RL_action_l22c16",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l22c16,
	      1u);
  init_symbol(&symbols[70u],
	      "WILL_FIRE_RL_action_l23c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l23c13,
	      1u);
  init_symbol(&symbols[71u],
	      "WILL_FIRE_RL_action_l29c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l29c25,
	      1u);
  init_symbol(&symbols[72u],
	      "WILL_FIRE_RL_action_l37c29",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l37c29,
	      1u);
  init_symbol(&symbols[73u],
	      "WILL_FIRE_RL_action_l48c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l48c25,
	      1u);
  init_symbol(&symbols[74u],
	      "WILL_FIRE_RL_action_l56c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l56c13,
	      1u);
  init_symbol(&symbols[75u],
	      "WILL_FIRE_RL_action_r_init_l29c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l29c13,
	      1u);
  init_symbol(&symbols[76u],
	      "WILL_FIRE_RL_action_r_init_l37c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l37c17,
	      1u);
  init_symbol(&symbols[77u],
	      "WILL_FIRE_RL_action_r_init_l48c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l48c13,
	      1u);
  init_symbol(&symbols[78u], "x__h75943", SYM_DEF, &DEF_x__h75943, 32u);
}


/* Rule actions */

void MOD_mkAufgabe5Tb::RL_dut_r1()
{
  tUInt8 DEF_data__h494;
  DEF_data__h494 = INST_dut_dataIn.METH_first();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
  INST_dut_dataIn.METH_deq();
  INST_dut_states.METH_write((tUInt8)1u);
  INST_dut_pinData.METH_port0__write((tUInt8)0u);
  INST_dut_counter.METH_write(0u);
  INST_dut_currentData.METH_write(DEF_data__h494);
}

void MOD_mkAufgabe5Tb::RL_dut_r2()
{
  tUInt8 DEF_x1__h741;
  tUInt8 DEF_dut_pointer_3_BITS_2_TO_0___d14;
  DEF_b__h638 = INST_dut_counter.METH_read();
  DEF_x__h779 = INST_dut_pointer.METH_read();
  DEF_bs__h898 = INST_dut_currentData.METH_read();
  DEF_dut_pointer_3_BITS_2_TO_0___d14 = (tUInt8)((tUInt8)7u & DEF_x__h779);
  DEF_x1__h741 = primExtract8(1u,
			      8u,
			      (tUInt8)(DEF_bs__h898),
			      3u,
			      (tUInt8)(DEF_dut_pointer_3_BITS_2_TO_0___d14),
			      3u,
			      (tUInt8)(DEF_dut_pointer_3_BITS_2_TO_0___d14));
  DEF_dut_counter_SLT_16___d8 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h638), 32u, 16u);
  DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10 = DEF_dut_counter_SLT_16___d8 ? DEF_b__h638 + 1u : 0u;
  DEF_NOT_dut_counter_SLT_16___d11 = !DEF_dut_counter_SLT_16___d8;
  INST_dut_counter.METH_write(DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_states.METH_write((tUInt8)2u);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_pinData.METH_port0__write(DEF_x1__h741);
}

void MOD_mkAufgabe5Tb::RL_dut_r3()
{
  tUInt8 DEF_NOT_dut_counter_SLT_16_1_AND_dut_pointer_3_EQ_7_7___d22;
  tUInt8 DEF_NOT_dut_counter_SLT_16_1_AND_NOT_dut_pointer_3_ETC___d24;
  tUInt8 DEF_dut_pointer_3_EQ_7_7_OR_dut_currentData_2_BIT__ETC___d21;
  tUInt8 DEF_dut_pointer_3_EQ_7___d17;
  tUInt8 DEF_x1__h892;
  tUInt32 DEF_dut_pointer_3_PLUS_1___d18;
  tUInt8 DEF_dut_pointer_3_PLUS_1_8_BITS_2_TO_0___d19;
  DEF_b__h638 = INST_dut_counter.METH_read();
  DEF_x__h779 = INST_dut_pointer.METH_read();
  DEF_bs__h898 = INST_dut_currentData.METH_read();
  DEF_dut_pointer_3_PLUS_1___d18 = DEF_x__h779 + 1u;
  DEF_dut_pointer_3_PLUS_1_8_BITS_2_TO_0___d19 = (tUInt8)((tUInt8)7u & DEF_dut_pointer_3_PLUS_1___d18);
  DEF_x1__h892 = primExtract8(1u,
			      8u,
			      (tUInt8)(DEF_bs__h898),
			      3u,
			      (tUInt8)(DEF_dut_pointer_3_PLUS_1_8_BITS_2_TO_0___d19),
			      3u,
			      (tUInt8)(DEF_dut_pointer_3_PLUS_1_8_BITS_2_TO_0___d19));
  DEF_dut_counter_SLT_16___d8 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h638), 32u, 16u);
  DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10 = DEF_dut_counter_SLT_16___d8 ? DEF_b__h638 + 1u : 0u;
  DEF_dut_pointer_3_EQ_7___d17 = DEF_x__h779 == 7u;
  DEF_dut_pointer_3_EQ_7_7_OR_dut_currentData_2_BIT__ETC___d21 = DEF_dut_pointer_3_EQ_7___d17 || DEF_x1__h892;
  DEF_NOT_dut_counter_SLT_16___d11 = !DEF_dut_counter_SLT_16___d8;
  DEF_NOT_dut_counter_SLT_16_1_AND_NOT_dut_pointer_3_ETC___d24 = DEF_NOT_dut_counter_SLT_16___d11 && !DEF_dut_pointer_3_EQ_7___d17;
  DEF_NOT_dut_counter_SLT_16_1_AND_dut_pointer_3_EQ_7_7___d22 = DEF_NOT_dut_counter_SLT_16___d11 && DEF_dut_pointer_3_EQ_7___d17;
  INST_dut_counter.METH_write(DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_pinData.METH_port0__write(DEF_dut_pointer_3_EQ_7_7_OR_dut_currentData_2_BIT__ETC___d21);
  if (DEF_NOT_dut_counter_SLT_16_1_AND_dut_pointer_3_EQ_7_7___d22)
    INST_dut_states.METH_write((tUInt8)3u);
  if (DEF_NOT_dut_counter_SLT_16_1_AND_NOT_dut_pointer_3_ETC___d24)
    INST_dut_pointer.METH_write(DEF_dut_pointer_3_PLUS_1___d18);
}

void MOD_mkAufgabe5Tb::RL_dut_r4()
{
  DEF_b__h638 = INST_dut_counter.METH_read();
  DEF_dut_counter_SLT_16___d8 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h638), 32u, 16u);
  DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10 = DEF_dut_counter_SLT_16___d8 ? DEF_b__h638 + 1u : 0u;
  DEF_NOT_dut_counter_SLT_16___d11 = !DEF_dut_counter_SLT_16___d8;
  INST_dut_counter.METH_write(DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10);
  if (DEF_dut_counter_SLT_16___d8)
    INST_dut_pinData.METH_port0__write((tUInt8)1u);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_pointer.METH_write(0u);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_currentData.METH_write((tUInt8)0u);
  if (DEF_NOT_dut_counter_SLT_16___d11)
    INST_dut_states.METH_write((tUInt8)0u);
}

void MOD_mkAufgabe5Tb::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas__6_AND_start_reg_2_wget__7___d28;
  DEF_start_reg_2_whas__6_AND_start_reg_2_wget__7___d28 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas__6_AND_start_reg_2_wget__7___d28);
}

void MOD_mkAufgabe5Tb::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkAufgabe5Tb::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__8_AND_state_fired_1_wget__9___d40;
  DEF_state_fired_1_whas__8_AND_state_fired_1_wget__9___d40 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__8_AND_state_fired_1_wget__9___d40);
}

void MOD_mkAufgabe5Tb::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__1_OR_NOT_state_overlap_pw_w_ETC___d46;
  DEF_state_can_overlap__h7337 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__1_OR_NOT_state_overlap_pw_w_ETC___d46 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h7337);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__1_OR_NOT_state_overlap_pw_w_ETC___d46);
}

void MOD_mkAufgabe5Tb::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkAufgabe5Tb::RL_action_l14c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkAufgabe5Tb::RL_action_l15c13()
{
  DEF_b__h72928 = INST_mistakes.METH_read();
  DEF_dut_pinData_port1__read____d64 = INST_dut_pinData.METH_port1__read();
  DEF_NOT_dut_pinData_port1__read__4___d65 = !DEF_dut_pinData_port1__read____d64;
  DEF_mistakes_6_PLUS_1___d67 = DEF_b__h72928 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_pinData_port1__read__4___d65)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
  if (DEF_NOT_dut_pinData_port1__read__4___d65)
    INST_mistakes.METH_write(DEF_mistakes_6_PLUS_1___d67);
}

void MOD_mkAufgabe5Tb::RL_action_l22c16()
{
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_dut_dataIn.METH_enq((tUInt8)170u);
}

void MOD_mkAufgabe5Tb::RL_action_l23c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkAufgabe5Tb::RL_action_r_init_l29c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_repeat_count.METH_write(1u);
}

void MOD_mkAufgabe5Tb::RL_action_l29c25()
{
  DEF_b__h72928 = INST_mistakes.METH_read();
  DEF_dut_pinData_port1__read____d64 = INST_dut_pinData.METH_port1__read();
  DEF_mistakes_6_PLUS_1___d67 = DEF_b__h72928 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_dut_pinData_port1__read____d64)
      dollar_display(sim_hdl, this, "s", &__str_literal_5);
  if (DEF_dut_pinData_port1__read____d64)
    INST_mistakes.METH_write(DEF_mistakes_6_PLUS_1___d67);
}

void MOD_mkAufgabe5Tb::RL_action_f_init_l36c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)9u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_counter.METH_write(0u);
}

void MOD_mkAufgabe5Tb::RL_action_r_init_l37c17()
{
  INST_state_mkFSMstate.METH_write((tUInt8)10u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_1_repeat_count.METH_write(1u);
}

void MOD_mkAufgabe5Tb::RL_action_l37c29()
{
  tUInt8 DEF_NOT_dut_pinData_port1__read__4_EQ_0b10101010_B_ETC___d128;
  tUInt8 DEF__0b10101010_BIT_counter_5_BITS_2_TO_0_25___d126;
  tUInt8 DEF_counter_5_BITS_2_TO_0___d125;
  tUInt32 DEF_signed_counter_5___d123;
  DEF_x__h75943 = INST_counter.METH_read();
  DEF_signed_counter_5___d123 = DEF_x__h75943;
  DEF_b__h72928 = INST_mistakes.METH_read();
  DEF_dut_pinData_port1__read____d64 = INST_dut_pinData.METH_port1__read();
  DEF_counter_5_BITS_2_TO_0___d125 = (tUInt8)((tUInt8)7u & DEF_x__h75943);
  DEF__0b10101010_BIT_counter_5_BITS_2_TO_0_25___d126 = primExtract8(1u,
								     8u,
								     (tUInt8)170u,
								     3u,
								     (tUInt8)(DEF_counter_5_BITS_2_TO_0___d125),
								     3u,
								     (tUInt8)(DEF_counter_5_BITS_2_TO_0___d125));
  DEF_NOT_dut_pinData_port1__read__4_EQ_0b10101010_B_ETC___d128 = !(DEF_dut_pinData_port1__read____d64 == DEF__0b10101010_BIT_counter_5_BITS_2_TO_0_25___d126);
  DEF_mistakes_6_PLUS_1___d67 = DEF_b__h72928 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)12u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h75783 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,-32,64",
		   &__str_literal_6,
		   DEF_signed_counter_5___d123,
		   DEF_v__h75783);
    if (DEF_NOT_dut_pinData_port1__read__4_EQ_0b10101010_B_ETC___d128)
      DEF_v__h75884 = dollar_time(sim_hdl);
    else
      DEF_v__h75884 = 12297829382473034410llu;
  }
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_pinData_port1__read__4_EQ_0b10101010_B_ETC___d128)
      dollar_display(sim_hdl,
		     this,
		     "s,-32,1,1,64",
		     &__str_literal_7,
		     DEF_signed_counter_5___d123,
		     DEF__0b10101010_BIT_counter_5_BITS_2_TO_0_25___d126,
		     DEF_dut_pinData_port1__read____d64,
		     DEF_v__h75884);
  if (DEF_NOT_dut_pinData_port1__read__4_EQ_0b10101010_B_ETC___d128)
    INST_mistakes.METH_write(DEF_mistakes_6_PLUS_1___d67);
}

void MOD_mkAufgabe5Tb::RL_action_f_update_l36c13()
{
  tUInt32 DEF_counter_5_PLUS_1___d131;
  DEF_x__h75943 = INST_counter.METH_read();
  DEF_counter_5_PLUS_1___d131 = DEF_x__h75943 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)14u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_counter.METH_write(DEF_counter_5_PLUS_1___d131);
}

void MOD_mkAufgabe5Tb::RL_action_r_init_l48c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)15u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_2_repeat_count.METH_write(1u);
}

void MOD_mkAufgabe5Tb::RL_action_l48c25()
{
  DEF_b__h72928 = INST_mistakes.METH_read();
  DEF_dut_pinData_port1__read____d64 = INST_dut_pinData.METH_port1__read();
  DEF_NOT_dut_pinData_port1__read__4___d65 = !DEF_dut_pinData_port1__read____d64;
  DEF_mistakes_6_PLUS_1___d67 = DEF_b__h72928 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)17u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_pinData_port1__read__4___d65)
      dollar_display(sim_hdl, this, "s,1", &__str_literal_8, DEF_dut_pinData_port1__read____d64);
  if (DEF_NOT_dut_pinData_port1__read__4___d65)
    INST_mistakes.METH_write(DEF_mistakes_6_PLUS_1___d67);
}

void MOD_mkAufgabe5Tb::RL_action_l56c13()
{
  tUInt32 DEF_signed_mistakes_6___d151;
  DEF_b__h72928 = INST_mistakes.METH_read();
  DEF_signed_mistakes_6___d151 = DEF_b__h72928;
  INST_state_mkFSMstate.METH_write((tUInt8)19u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_9, DEF_signed_mistakes_6___d151);
}

void MOD_mkAufgabe5Tb::RL_action_ovlp_r_update_l29c13()
{
  tUInt32 DEF_x__h78862;
  tUInt32 DEF_IF_jj_repeat_count_read__5_BIT_14_54_THEN_1_EL_ETC___d157;
  DEF_jj_repeat_count_read____d75 = INST_jj_repeat_count.METH_read();
  DEF_x__h78862 = 32767u & ((((tUInt32)(16383u & DEF_jj_repeat_count_read____d75)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_repeat_count_read__5_BIT_14_54_THEN_1_EL_ETC___d157 = (tUInt8)(DEF_jj_repeat_count_read____d75 >> 14u) ? 1u : DEF_x__h78862;
  INST_state_overlap_pw.METH_wset();
  INST_jj_repeat_count.METH_write(DEF_IF_jj_repeat_count_read__5_BIT_14_54_THEN_1_EL_ETC___d157);
}

void MOD_mkAufgabe5Tb::RL_action_ovlp_r_update_l37c17()
{
  tUInt32 DEF_x__h79076;
  tUInt32 DEF_IF_jj_1_repeat_count_read__7_BIT_15_61_THEN_1__ETC___d164;
  DEF_jj_1_repeat_count_read____d97 = INST_jj_1_repeat_count.METH_read();
  DEF_x__h79076 = 65535u & ((((tUInt32)(32767u & DEF_jj_1_repeat_count_read____d97)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_1_repeat_count_read__7_BIT_15_61_THEN_1__ETC___d164 = (tUInt8)(DEF_jj_1_repeat_count_read____d97 >> 15u) ? 1u : DEF_x__h79076;
  INST_state_overlap_pw.METH_wset();
  INST_jj_1_repeat_count.METH_write(DEF_IF_jj_1_repeat_count_read__7_BIT_15_61_THEN_1__ETC___d164);
}

void MOD_mkAufgabe5Tb::RL_action_ovlp_r_update_l48c13()
{
  tUInt32 DEF_x__h79289;
  tUInt32 DEF_IF_jj_2_repeat_count_read__33_BIT_15_69_THEN_1_ETC___d172;
  DEF_jj_2_repeat_count_read____d133 = INST_jj_2_repeat_count.METH_read();
  DEF_x__h79289 = 65535u & ((((tUInt32)(32767u & DEF_jj_2_repeat_count_read____d133)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_2_repeat_count_read__33_BIT_15_69_THEN_1_ETC___d172 = (tUInt8)(DEF_jj_2_repeat_count_read____d133 >> 15u) ? 1u : DEF_x__h79289;
  INST_state_overlap_pw.METH_wset();
  INST_jj_2_repeat_count.METH_write(DEF_IF_jj_2_repeat_count_read__33_BIT_15_69_THEN_1_ETC___d172);
}

void MOD_mkAufgabe5Tb::RL_idle_l13c18()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkAufgabe5Tb::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkAufgabe5Tb::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkAufgabe5Tb::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkAufgabe5Tb::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l14c13 && (((((((((((DEF_WILL_FIRE_RL_action_l15c13 || DEF_WILL_FIRE_RL_action_l22c16) || DEF_WILL_FIRE_RL_action_l23c13) || DEF_WILL_FIRE_RL_action_r_init_l29c13) || DEF_WILL_FIRE_RL_action_l29c25) || DEF_WILL_FIRE_RL_action_f_init_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l37c17) || DEF_WILL_FIRE_RL_action_l37c29) || DEF_WILL_FIRE_RL_action_f_update_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l48c13) || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkAufgabe5Tb::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l15c13 && ((((((((((DEF_WILL_FIRE_RL_action_l22c16 || DEF_WILL_FIRE_RL_action_l23c13) || DEF_WILL_FIRE_RL_action_r_init_l29c13) || DEF_WILL_FIRE_RL_action_l29c25) || DEF_WILL_FIRE_RL_action_f_init_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l37c17) || DEF_WILL_FIRE_RL_action_l37c29) || DEF_WILL_FIRE_RL_action_f_update_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l48c13) || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}

void MOD_mkAufgabe5Tb::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l22c16 && (((((((((DEF_WILL_FIRE_RL_action_l23c13 || DEF_WILL_FIRE_RL_action_r_init_l29c13) || DEF_WILL_FIRE_RL_action_l29c25) || DEF_WILL_FIRE_RL_action_f_init_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l37c17) || DEF_WILL_FIRE_RL_action_l37c29) || DEF_WILL_FIRE_RL_action_f_update_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l48c13) || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
}

void MOD_mkAufgabe5Tb::__me_check_12()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l23c13 && ((((((((DEF_WILL_FIRE_RL_action_r_init_l29c13 || DEF_WILL_FIRE_RL_action_l29c25) || DEF_WILL_FIRE_RL_action_f_init_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l37c17) || DEF_WILL_FIRE_RL_action_l37c29) || DEF_WILL_FIRE_RL_action_f_update_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l48c13) || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
}

void MOD_mkAufgabe5Tb::__me_check_13()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l29c13 && (((((((DEF_WILL_FIRE_RL_action_l29c25 || DEF_WILL_FIRE_RL_action_f_init_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l37c17) || DEF_WILL_FIRE_RL_action_l37c29) || DEF_WILL_FIRE_RL_action_f_update_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l48c13) || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_14);
}

void MOD_mkAufgabe5Tb::__me_check_14()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l29c25 && ((((((DEF_WILL_FIRE_RL_action_f_init_l36c13 || DEF_WILL_FIRE_RL_action_r_init_l37c17) || DEF_WILL_FIRE_RL_action_l37c29) || DEF_WILL_FIRE_RL_action_f_update_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l48c13) || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_15);
}

void MOD_mkAufgabe5Tb::__me_check_15()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_init_l36c13 && (((((DEF_WILL_FIRE_RL_action_r_init_l37c17 || DEF_WILL_FIRE_RL_action_l37c29) || DEF_WILL_FIRE_RL_action_f_update_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l48c13) || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_16);
}

void MOD_mkAufgabe5Tb::__me_check_16()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l37c17 && ((((DEF_WILL_FIRE_RL_action_l37c29 || DEF_WILL_FIRE_RL_action_f_update_l36c13) || DEF_WILL_FIRE_RL_action_r_init_l48c13) || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_17);
}

void MOD_mkAufgabe5Tb::__me_check_17()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l37c29 && (((DEF_WILL_FIRE_RL_action_f_update_l36c13 || DEF_WILL_FIRE_RL_action_r_init_l48c13) || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_18);
}

void MOD_mkAufgabe5Tb::__me_check_18()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_update_l36c13 && ((DEF_WILL_FIRE_RL_action_r_init_l48c13 || DEF_WILL_FIRE_RL_action_l48c25) || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_19);
}

void MOD_mkAufgabe5Tb::__me_check_19()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l48c13 && (DEF_WILL_FIRE_RL_action_l48c25 || DEF_WILL_FIRE_RL_action_l56c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_20);
}

void MOD_mkAufgabe5Tb::__me_check_20()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l48c25 && DEF_WILL_FIRE_RL_action_l56c13)
      dollar_error(sim_hdl, this, "s", &__str_literal_21);
}


/* Methods */


/* Reset routines */

void MOD_mkAufgabe5Tb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_mistakes.reset_RST(ARG_rst_in);
  INST_jj_repeat_count.reset_RST(ARG_rst_in);
  INST_jj_2_repeat_count.reset_RST(ARG_rst_in);
  INST_jj_1_repeat_count.reset_RST(ARG_rst_in);
  INST_dut_states.reset_RST(ARG_rst_in);
  INST_dut_pointer.reset_RST(ARG_rst_in);
  INST_dut_pinData.reset_RST(ARG_rst_in);
  INST_dut_dataIn.reset_RST(ARG_rst_in);
  INST_dut_counter.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAufgabe5Tb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAufgabe5Tb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_counter.dump_state(indent + 2u);
  INST_dut_counter.dump_state(indent + 2u);
  INST_dut_currentData.dump_state(indent + 2u);
  INST_dut_dataIn.dump_state(indent + 2u);
  INST_dut_pinData.dump_state(indent + 2u);
  INST_dut_pointer.dump_state(indent + 2u);
  INST_dut_states.dump_state(indent + 2u);
  INST_jj_1_repeat_count.dump_state(indent + 2u);
  INST_jj_2_repeat_count.dump_state(indent + 2u);
  INST_jj_repeat_count.dump_state(indent + 2u);
  INST_mistakes.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAufgabe5Tb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 54u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_dut_counter_SLT_16___d11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_dut_pinData_port1__read__4___d65", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_init_l36c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_update_l36c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l14c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l15c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l22c16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l23c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l29c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l37c29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l48c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l56c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l29c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l37c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l48c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h638", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h72928", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bs__h898", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_counter_SLT_16___d8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_pinData_port1__read____d64", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_1_repeat_count_read____d97", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_2_repeat_count_read____d133", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_repeat_count_read____d75", 15u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mistakes_6_PLUS_1___d67", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "state_can_overlap__h7337", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h75783", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h75884", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h75943", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h779", 32u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_dut_counter.dump_VCD_defs(num);
  num = INST_dut_currentData.dump_VCD_defs(num);
  num = INST_dut_dataIn.dump_VCD_defs(num);
  num = INST_dut_pinData.dump_VCD_defs(num);
  num = INST_dut_pointer.dump_VCD_defs(num);
  num = INST_dut_states.dump_VCD_defs(num);
  num = INST_jj_1_repeat_count.dump_VCD_defs(num);
  num = INST_jj_2_repeat_count.dump_VCD_defs(num);
  num = INST_jj_repeat_count.dump_VCD_defs(num);
  num = INST_mistakes.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAufgabe5Tb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAufgabe5Tb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkAufgabe5Tb::vcd_defs(tVCDDumpType dt, MOD_mkAufgabe5Tb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 15u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10) != DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10, 32u);
	backing.DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10 = DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10;
      }
      ++num;
      if ((backing.DEF_NOT_dut_counter_SLT_16___d11) != DEF_NOT_dut_counter_SLT_16___d11)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_dut_counter_SLT_16___d11, 1u);
	backing.DEF_NOT_dut_counter_SLT_16___d11 = DEF_NOT_dut_counter_SLT_16___d11;
      }
      ++num;
      if ((backing.DEF_NOT_dut_pinData_port1__read__4___d65) != DEF_NOT_dut_pinData_port1__read__4___d65)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_dut_pinData_port1__read__4___d65, 1u);
	backing.DEF_NOT_dut_pinData_port1__read__4___d65 = DEF_NOT_dut_pinData_port1__read__4___d65;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_init_l36c13) != DEF_WILL_FIRE_RL_action_f_init_l36c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_init_l36c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_init_l36c13 = DEF_WILL_FIRE_RL_action_f_init_l36c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_update_l36c13) != DEF_WILL_FIRE_RL_action_f_update_l36c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_update_l36c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_update_l36c13 = DEF_WILL_FIRE_RL_action_f_update_l36c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l14c13) != DEF_WILL_FIRE_RL_action_l14c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l14c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l14c13 = DEF_WILL_FIRE_RL_action_l14c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l15c13) != DEF_WILL_FIRE_RL_action_l15c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l15c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l15c13 = DEF_WILL_FIRE_RL_action_l15c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l22c16) != DEF_WILL_FIRE_RL_action_l22c16)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l22c16, 1u);
	backing.DEF_WILL_FIRE_RL_action_l22c16 = DEF_WILL_FIRE_RL_action_l22c16;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l23c13) != DEF_WILL_FIRE_RL_action_l23c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l23c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l23c13 = DEF_WILL_FIRE_RL_action_l23c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l29c25) != DEF_WILL_FIRE_RL_action_l29c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l29c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_l29c25 = DEF_WILL_FIRE_RL_action_l29c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l37c29) != DEF_WILL_FIRE_RL_action_l37c29)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l37c29, 1u);
	backing.DEF_WILL_FIRE_RL_action_l37c29 = DEF_WILL_FIRE_RL_action_l37c29;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l48c25) != DEF_WILL_FIRE_RL_action_l48c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l48c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_l48c25 = DEF_WILL_FIRE_RL_action_l48c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l56c13) != DEF_WILL_FIRE_RL_action_l56c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l56c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l56c13 = DEF_WILL_FIRE_RL_action_l56c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l29c13) != DEF_WILL_FIRE_RL_action_r_init_l29c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l29c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l29c13 = DEF_WILL_FIRE_RL_action_r_init_l29c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l37c17) != DEF_WILL_FIRE_RL_action_r_init_l37c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l37c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l37c17 = DEF_WILL_FIRE_RL_action_r_init_l37c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l48c13) != DEF_WILL_FIRE_RL_action_r_init_l48c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l48c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l48c13 = DEF_WILL_FIRE_RL_action_r_init_l48c13;
      }
      ++num;
      if ((backing.DEF_b__h638) != DEF_b__h638)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h638, 32u);
	backing.DEF_b__h638 = DEF_b__h638;
      }
      ++num;
      if ((backing.DEF_b__h72928) != DEF_b__h72928)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h72928, 32u);
	backing.DEF_b__h72928 = DEF_b__h72928;
      }
      ++num;
      if ((backing.DEF_bs__h898) != DEF_bs__h898)
      {
	vcd_write_val(sim_hdl, num, DEF_bs__h898, 8u);
	backing.DEF_bs__h898 = DEF_bs__h898;
      }
      ++num;
      if ((backing.DEF_dut_counter_SLT_16___d8) != DEF_dut_counter_SLT_16___d8)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_counter_SLT_16___d8, 1u);
	backing.DEF_dut_counter_SLT_16___d8 = DEF_dut_counter_SLT_16___d8;
      }
      ++num;
      if ((backing.DEF_dut_pinData_port1__read____d64) != DEF_dut_pinData_port1__read____d64)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_pinData_port1__read____d64, 1u);
	backing.DEF_dut_pinData_port1__read____d64 = DEF_dut_pinData_port1__read____d64;
      }
      ++num;
      if ((backing.DEF_jj_1_repeat_count_read____d97) != DEF_jj_1_repeat_count_read____d97)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_1_repeat_count_read____d97, 16u);
	backing.DEF_jj_1_repeat_count_read____d97 = DEF_jj_1_repeat_count_read____d97;
      }
      ++num;
      if ((backing.DEF_jj_2_repeat_count_read____d133) != DEF_jj_2_repeat_count_read____d133)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_2_repeat_count_read____d133, 16u);
	backing.DEF_jj_2_repeat_count_read____d133 = DEF_jj_2_repeat_count_read____d133;
      }
      ++num;
      if ((backing.DEF_jj_repeat_count_read____d75) != DEF_jj_repeat_count_read____d75)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_repeat_count_read____d75, 15u);
	backing.DEF_jj_repeat_count_read____d75 = DEF_jj_repeat_count_read____d75;
      }
      ++num;
      if ((backing.DEF_mistakes_6_PLUS_1___d67) != DEF_mistakes_6_PLUS_1___d67)
      {
	vcd_write_val(sim_hdl, num, DEF_mistakes_6_PLUS_1___d67, 32u);
	backing.DEF_mistakes_6_PLUS_1___d67 = DEF_mistakes_6_PLUS_1___d67;
      }
      ++num;
      if ((backing.DEF_state_can_overlap__h7337) != DEF_state_can_overlap__h7337)
      {
	vcd_write_val(sim_hdl, num, DEF_state_can_overlap__h7337, 1u);
	backing.DEF_state_can_overlap__h7337 = DEF_state_can_overlap__h7337;
      }
      ++num;
      if ((backing.DEF_v__h75783) != DEF_v__h75783)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h75783, 64u);
	backing.DEF_v__h75783 = DEF_v__h75783;
      }
      ++num;
      if ((backing.DEF_v__h75884) != DEF_v__h75884)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h75884, 64u);
	backing.DEF_v__h75884 = DEF_v__h75884;
      }
      ++num;
      if ((backing.DEF_x__h75943) != DEF_x__h75943)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h75943, 32u);
	backing.DEF_x__h75943 = DEF_x__h75943;
      }
      ++num;
      if ((backing.DEF_x__h779) != DEF_x__h779)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h779, 32u);
	backing.DEF_x__h779 = DEF_x__h779;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10, 32u);
      backing.DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10 = DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10;
      vcd_write_val(sim_hdl, num++, DEF_NOT_dut_counter_SLT_16___d11, 1u);
      backing.DEF_NOT_dut_counter_SLT_16___d11 = DEF_NOT_dut_counter_SLT_16___d11;
      vcd_write_val(sim_hdl, num++, DEF_NOT_dut_pinData_port1__read__4___d65, 1u);
      backing.DEF_NOT_dut_pinData_port1__read__4___d65 = DEF_NOT_dut_pinData_port1__read__4___d65;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_init_l36c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_init_l36c13 = DEF_WILL_FIRE_RL_action_f_init_l36c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_update_l36c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_update_l36c13 = DEF_WILL_FIRE_RL_action_f_update_l36c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l14c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l14c13 = DEF_WILL_FIRE_RL_action_l14c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l15c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l15c13 = DEF_WILL_FIRE_RL_action_l15c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l22c16, 1u);
      backing.DEF_WILL_FIRE_RL_action_l22c16 = DEF_WILL_FIRE_RL_action_l22c16;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l23c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l23c13 = DEF_WILL_FIRE_RL_action_l23c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l29c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_l29c25 = DEF_WILL_FIRE_RL_action_l29c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l37c29, 1u);
      backing.DEF_WILL_FIRE_RL_action_l37c29 = DEF_WILL_FIRE_RL_action_l37c29;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l48c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_l48c25 = DEF_WILL_FIRE_RL_action_l48c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l56c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l56c13 = DEF_WILL_FIRE_RL_action_l56c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l29c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l29c13 = DEF_WILL_FIRE_RL_action_r_init_l29c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l37c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l37c17 = DEF_WILL_FIRE_RL_action_r_init_l37c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l48c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l48c13 = DEF_WILL_FIRE_RL_action_r_init_l48c13;
      vcd_write_val(sim_hdl, num++, DEF_b__h638, 32u);
      backing.DEF_b__h638 = DEF_b__h638;
      vcd_write_val(sim_hdl, num++, DEF_b__h72928, 32u);
      backing.DEF_b__h72928 = DEF_b__h72928;
      vcd_write_val(sim_hdl, num++, DEF_bs__h898, 8u);
      backing.DEF_bs__h898 = DEF_bs__h898;
      vcd_write_val(sim_hdl, num++, DEF_dut_counter_SLT_16___d8, 1u);
      backing.DEF_dut_counter_SLT_16___d8 = DEF_dut_counter_SLT_16___d8;
      vcd_write_val(sim_hdl, num++, DEF_dut_pinData_port1__read____d64, 1u);
      backing.DEF_dut_pinData_port1__read____d64 = DEF_dut_pinData_port1__read____d64;
      vcd_write_val(sim_hdl, num++, DEF_jj_1_repeat_count_read____d97, 16u);
      backing.DEF_jj_1_repeat_count_read____d97 = DEF_jj_1_repeat_count_read____d97;
      vcd_write_val(sim_hdl, num++, DEF_jj_2_repeat_count_read____d133, 16u);
      backing.DEF_jj_2_repeat_count_read____d133 = DEF_jj_2_repeat_count_read____d133;
      vcd_write_val(sim_hdl, num++, DEF_jj_repeat_count_read____d75, 15u);
      backing.DEF_jj_repeat_count_read____d75 = DEF_jj_repeat_count_read____d75;
      vcd_write_val(sim_hdl, num++, DEF_mistakes_6_PLUS_1___d67, 32u);
      backing.DEF_mistakes_6_PLUS_1___d67 = DEF_mistakes_6_PLUS_1___d67;
      vcd_write_val(sim_hdl, num++, DEF_state_can_overlap__h7337, 1u);
      backing.DEF_state_can_overlap__h7337 = DEF_state_can_overlap__h7337;
      vcd_write_val(sim_hdl, num++, DEF_v__h75783, 64u);
      backing.DEF_v__h75783 = DEF_v__h75783;
      vcd_write_val(sim_hdl, num++, DEF_v__h75884, 64u);
      backing.DEF_v__h75884 = DEF_v__h75884;
      vcd_write_val(sim_hdl, num++, DEF_x__h75943, 32u);
      backing.DEF_x__h75943 = DEF_x__h75943;
      vcd_write_val(sim_hdl, num++, DEF_x__h779, 32u);
      backing.DEF_x__h779 = DEF_x__h779;
    }
}

void MOD_mkAufgabe5Tb::vcd_prims(tVCDDumpType dt, MOD_mkAufgabe5Tb &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_dut_counter.dump_VCD(dt, backing.INST_dut_counter);
  INST_dut_currentData.dump_VCD(dt, backing.INST_dut_currentData);
  INST_dut_dataIn.dump_VCD(dt, backing.INST_dut_dataIn);
  INST_dut_pinData.dump_VCD(dt, backing.INST_dut_pinData);
  INST_dut_pointer.dump_VCD(dt, backing.INST_dut_pointer);
  INST_dut_states.dump_VCD(dt, backing.INST_dut_states);
  INST_jj_1_repeat_count.dump_VCD(dt, backing.INST_jj_1_repeat_count);
  INST_jj_2_repeat_count.dump_VCD(dt, backing.INST_jj_2_repeat_count);
  INST_jj_repeat_count.dump_VCD(dt, backing.INST_jj_repeat_count);
  INST_mistakes.dump_VCD(dt, backing.INST_mistakes);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
