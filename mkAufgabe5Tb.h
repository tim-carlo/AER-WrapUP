/*
 * Generated by Bluespec Compiler, version 2023.07-7-g527eaa0b (build 527eaa0b)
 * 
 * On Sat Feb 10 19:23:35 UTC 2024
 * 
 */

/* Generation options: */
#ifndef __mkAufgabe5Tb_h__
#define __mkAufgabe5Tb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkAufgabe5Tb module */
class MOD_mkAufgabe5Tb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt32> INST_counter;
  MOD_Reg<tUInt32> INST_dut_counter;
  MOD_Reg<tUInt8> INST_dut_currentData;
  MOD_Fifo<tUInt8> INST_dut_dataIn;
  MOD_CReg<tUInt8> INST_dut_pinData;
  MOD_Reg<tUInt32> INST_dut_pointer;
  MOD_Reg<tUInt8> INST_dut_states;
  MOD_ConfigReg<tUInt32> INST_jj_1_repeat_count;
  MOD_ConfigReg<tUInt32> INST_jj_2_repeat_count;
  MOD_ConfigReg<tUInt32> INST_jj_repeat_count;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkAufgabe5Tb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_action_l41c25;
  tUInt8 DEF_WILL_FIRE_RL_action_r_init_l41c13;
  tUInt8 DEF_WILL_FIRE_RL_action_f_update_l33c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l34c29;
  tUInt8 DEF_WILL_FIRE_RL_action_r_init_l34c17;
  tUInt8 DEF_WILL_FIRE_RL_action_f_init_l33c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l27c25;
  tUInt8 DEF_WILL_FIRE_RL_action_r_init_l27c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l21c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l20c16;
  tUInt8 DEF_WILL_FIRE_RL_action_l14c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l13c13;
  tUInt32 DEF_x__h74240;
  tUInt32 DEF_jj_2_repeat_count_read____d59;
  tUInt32 DEF_jj_1_repeat_count_read____d99;
  tUInt32 DEF_jj_repeat_count_read____d78;
  tUInt8 DEF_state_can_overlap__h7146;
  tUInt8 DEF_dut_pinData_port1__read____d69;
  tUInt8 DEF_NOT_dut_pinData_port1__read__9___d70;
 
 /* Local definitions */
 private:
  tUInt32 DEF_b__h636;
  tUInt32 DEF_x__h777;
  tUInt8 DEF_bs__h862;
  tUInt32 DEF_IF_dut_counter_SLT_16_THEN_dut_counter_PLUS_1__ETC___d10;
  tUInt8 DEF_dut_counter_SLT_16___d8;
  tUInt32 DEF_dut_counter_PLUS_1___d9;
  tUInt8 DEF_NOT_dut_counter_SLT_16___d11;
 
 /* Rules */
 public:
  void RL_dut_r1();
  void RL_dut_r2();
  void RL_dut_r3();
  void RL_dut_r4();
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_l13c13();
  void RL_action_l14c13();
  void RL_action_l20c16();
  void RL_action_l21c13();
  void RL_action_r_init_l27c13();
  void RL_action_l27c25();
  void RL_action_f_init_l33c13();
  void RL_action_r_init_l34c17();
  void RL_action_l34c29();
  void RL_action_f_update_l33c13();
  void RL_action_r_init_l41c13();
  void RL_action_l41c25();
  void RL_action_ovlp_r_update_l27c13();
  void RL_action_ovlp_r_update_l34c17();
  void RL_action_ovlp_r_update_l41c13();
  void RL_idle_l12c18();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_9();
  void __me_check_10();
  void __me_check_11();
  void __me_check_12();
  void __me_check_13();
  void __me_check_14();
  void __me_check_15();
  void __me_check_16();
  void __me_check_17();
  void __me_check_18();
  void __me_check_19();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAufgabe5Tb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkAufgabe5Tb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkAufgabe5Tb &backing);
};

#endif /* ifndef __mkAufgabe5Tb_h__ */
