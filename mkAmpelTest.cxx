/*
 * Generated by Bluespec Compiler, version 2023.07-7-g527eaa0b (build 527eaa0b)
 * 
 * On Sat Feb 10 22:40:46 UTC 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkAmpelTest.h"


/* String declarations */
static std::string const __str_literal_4("Error: \"Ampel.bsv\", line 27, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_testFSM_action_l27c9]\n  and [RL_ampel_testFSM_action_l33c14, RL_ampel_testFSM_action_l36c9,\n  RL_ampel_testFSM_action_l41c33, RL_ampel_testFSM_action_l52c14,\n  RL_ampel_testFSM_action_l53c14, RL_ampel_testFSM_action_l54c25,\n  RL_ampel_testFSM_action_r_init_l55c9, RL_ampel_testFSM_action_l55c29] )\n  fired in the same clock cycle.\n",
					 433u);
static std::string const __str_literal_5("Error: \"Ampel.bsv\", line 33, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_testFSM_action_l33c14]\n  and [RL_ampel_testFSM_action_l36c9, RL_ampel_testFSM_action_l41c33,\n  RL_ampel_testFSM_action_l52c14, RL_ampel_testFSM_action_l53c14,\n  RL_ampel_testFSM_action_l54c25, RL_ampel_testFSM_action_r_init_l55c9,\n  RL_ampel_testFSM_action_l55c29] ) fired in the same clock cycle.\n",
					 401u);
static std::string const __str_literal_6("Error: \"Ampel.bsv\", line 36, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_testFSM_action_l36c9]\n  and [RL_ampel_testFSM_action_l41c33, RL_ampel_testFSM_action_l52c14,\n  RL_ampel_testFSM_action_l53c14, RL_ampel_testFSM_action_l54c25,\n  RL_ampel_testFSM_action_r_init_l55c9, RL_ampel_testFSM_action_l55c29] )\n  fired in the same clock cycle.\n",
					 368u);
static std::string const __str_literal_7("Error: \"Ampel.bsv\", line 41, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_testFSM_action_l41c33]\n  and [RL_ampel_testFSM_action_l52c14, RL_ampel_testFSM_action_l53c14,\n  RL_ampel_testFSM_action_l54c25, RL_ampel_testFSM_action_r_init_l55c9,\n  RL_ampel_testFSM_action_l55c29] ) fired in the same clock cycle.\n",
					 336u);
static std::string const __str_literal_8("Error: \"Ampel.bsv\", line 52, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_testFSM_action_l52c14]\n  and [RL_ampel_testFSM_action_l53c14, RL_ampel_testFSM_action_l54c25,\n  RL_ampel_testFSM_action_r_init_l55c9, RL_ampel_testFSM_action_l55c29] )\n  fired in the same clock cycle.\n",
					 304u);
static std::string const __str_literal_9("Error: \"Ampel.bsv\", line 53, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_testFSM_action_l53c14]\n  and [RL_ampel_testFSM_action_l54c25, RL_ampel_testFSM_action_r_init_l55c9,\n  RL_ampel_testFSM_action_l55c29] ) fired in the same clock cycle.\n",
					 270u);
static std::string const __str_literal_10("Error: \"Ampel.bsv\", line 54, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_testFSM_action_l54c25]\n  and [RL_ampel_testFSM_action_r_init_l55c9, RL_ampel_testFSM_action_l55c29] )\n  fired in the same clock cycle.\n",
					  238u);
static std::string const __str_literal_11("Error: \"Ampel.bsv\", line 55, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_ampel_testFSM_action_r_init_l55c9] and [RL_ampel_testFSM_action_l55c29]\n  ) fired in the same clock cycle.\n",
					  205u);
static std::string const __str_literal_1("asdf", 4u);
static std::string const __str_literal_2("handeld", 7u);
static std::string const __str_literal_3("time: %d ampel: %d, pedestrian: %d", 34u);


/* Constructor */
MOD_mkAmpelTest::MOD_mkAmpelTest(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_ampel_handeldRequest(simHdl, "ampel_handeldRequest", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_idle_counter(simHdl, "ampel_idle_counter", this, 8u),
    INST_ampel_pedestrian_request(simHdl, "ampel_pedestrian_request", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_pedestrian_state(simHdl, "ampel_pedestrian_state", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_startetFSM(simHdl, "ampel_startetFSM", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_state(simHdl, "ampel_state", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_testFSM_abort(simHdl, "ampel_testFSM_abort", this, 1u, (tUInt8)0u),
    INST_ampel_testFSM_jj_repeat_count(simHdl,
				       "ampel_testFSM_jj_repeat_count",
				       this,
				       10u,
				       1u,
				       (tUInt8)0u),
    INST_ampel_testFSM_start_reg(simHdl, "ampel_testFSM_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_testFSM_start_reg_1(simHdl,
				   "ampel_testFSM_start_reg_1",
				   this,
				   1u,
				   (tUInt8)0u,
				   (tUInt8)0u),
    INST_ampel_testFSM_start_reg_2(simHdl, "ampel_testFSM_start_reg_2", this, 1u, (tUInt8)0u),
    INST_ampel_testFSM_start_wire(simHdl, "ampel_testFSM_start_wire", this, 1u, (tUInt8)0u),
    INST_ampel_testFSM_state_can_overlap(simHdl,
					 "ampel_testFSM_state_can_overlap",
					 this,
					 1u,
					 (tUInt8)1u,
					 (tUInt8)0u),
    INST_ampel_testFSM_state_fired(simHdl,
				   "ampel_testFSM_state_fired",
				   this,
				   1u,
				   (tUInt8)0u,
				   (tUInt8)0u),
    INST_ampel_testFSM_state_fired_1(simHdl, "ampel_testFSM_state_fired_1", this, 1u, (tUInt8)0u),
    INST_ampel_testFSM_state_mkFSMstate(simHdl,
					"ampel_testFSM_state_mkFSMstate",
					this,
					4u,
					(tUInt8)0u,
					(tUInt8)0u),
    INST_ampel_testFSM_state_overlap_pw(simHdl, "ampel_testFSM_state_overlap_pw", this, 0u),
    INST_ampel_testFSM_state_set_pw(simHdl, "ampel_testFSM_state_set_pw", this, 0u),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h34989(12297829382473034410llu)
{
  symbol_count = 58u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAmpelTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_12", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[8u], "ampel_handeldRequest", SYM_MODULE, &INST_ampel_handeldRequest);
  init_symbol(&symbols[9u], "ampel_idle_counter", SYM_MODULE, &INST_ampel_idle_counter);
  init_symbol(&symbols[10u], "ampel_pedestrian_request", SYM_MODULE, &INST_ampel_pedestrian_request);
  init_symbol(&symbols[11u], "ampel_pedestrian_state", SYM_MODULE, &INST_ampel_pedestrian_state);
  init_symbol(&symbols[12u], "ampel_startetFSM", SYM_MODULE, &INST_ampel_startetFSM);
  init_symbol(&symbols[13u], "ampel_state", SYM_MODULE, &INST_ampel_state);
  init_symbol(&symbols[14u], "ampel_testFSM_abort", SYM_MODULE, &INST_ampel_testFSM_abort);
  init_symbol(&symbols[15u],
	      "ampel_testFSM_jj_repeat_count",
	      SYM_MODULE,
	      &INST_ampel_testFSM_jj_repeat_count);
  init_symbol(&symbols[16u], "ampel_testFSM_start_reg", SYM_MODULE, &INST_ampel_testFSM_start_reg);
  init_symbol(&symbols[17u],
	      "ampel_testFSM_start_reg_1",
	      SYM_MODULE,
	      &INST_ampel_testFSM_start_reg_1);
  init_symbol(&symbols[18u],
	      "ampel_testFSM_start_reg_2",
	      SYM_MODULE,
	      &INST_ampel_testFSM_start_reg_2);
  init_symbol(&symbols[19u], "ampel_testFSM_start_wire", SYM_MODULE, &INST_ampel_testFSM_start_wire);
  init_symbol(&symbols[20u],
	      "ampel_testFSM_state_can_overlap",
	      SYM_MODULE,
	      &INST_ampel_testFSM_state_can_overlap);
  init_symbol(&symbols[21u],
	      "ampel_testFSM_state_can_overlap__h4150",
	      SYM_DEF,
	      &DEF_ampel_testFSM_state_can_overlap__h4150,
	      1u);
  init_symbol(&symbols[22u],
	      "ampel_testFSM_state_fired",
	      SYM_MODULE,
	      &INST_ampel_testFSM_state_fired);
  init_symbol(&symbols[23u],
	      "ampel_testFSM_state_fired_1",
	      SYM_MODULE,
	      &INST_ampel_testFSM_state_fired_1);
  init_symbol(&symbols[24u],
	      "ampel_testFSM_state_mkFSMstate",
	      SYM_MODULE,
	      &INST_ampel_testFSM_state_mkFSMstate);
  init_symbol(&symbols[25u],
	      "ampel_testFSM_state_overlap_pw",
	      SYM_MODULE,
	      &INST_ampel_testFSM_state_overlap_pw);
  init_symbol(&symbols[26u],
	      "ampel_testFSM_state_set_pw",
	      SYM_MODULE,
	      &INST_ampel_testFSM_state_set_pw);
  init_symbol(&symbols[27u], "b__h10619", SYM_DEF, &DEF_b__h10619, 8u);
  init_symbol(&symbols[28u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[29u], "RL_ampel_sequel", SYM_RULE);
  init_symbol(&symbols[30u], "RL_ampel_startit", SYM_RULE);
  init_symbol(&symbols[31u], "RL_ampel_testFSM_action_l27c9", SYM_RULE);
  init_symbol(&symbols[32u], "RL_ampel_testFSM_action_l33c14", SYM_RULE);
  init_symbol(&symbols[33u], "RL_ampel_testFSM_action_l36c9", SYM_RULE);
  init_symbol(&symbols[34u], "RL_ampel_testFSM_action_l41c33", SYM_RULE);
  init_symbol(&symbols[35u], "RL_ampel_testFSM_action_l52c14", SYM_RULE);
  init_symbol(&symbols[36u], "RL_ampel_testFSM_action_l53c14", SYM_RULE);
  init_symbol(&symbols[37u], "RL_ampel_testFSM_action_l54c25", SYM_RULE);
  init_symbol(&symbols[38u], "RL_ampel_testFSM_action_l55c29", SYM_RULE);
  init_symbol(&symbols[39u], "RL_ampel_testFSM_action_ovlp_r_update_l55c9", SYM_RULE);
  init_symbol(&symbols[40u], "RL_ampel_testFSM_action_r_init_l55c9", SYM_RULE);
  init_symbol(&symbols[41u], "RL_ampel_testFSM_fsm_start", SYM_RULE);
  init_symbol(&symbols[42u], "RL_ampel_testFSM_idle_l25c14", SYM_RULE);
  init_symbol(&symbols[43u], "RL_ampel_testFSM_restart", SYM_RULE);
  init_symbol(&symbols[44u], "RL_ampel_testFSM_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[45u], "RL_ampel_testFSM_state_every", SYM_RULE);
  init_symbol(&symbols[46u], "RL_ampel_testFSM_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[47u], "RL_ampel_testFSM_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[48u], "RL_check", SYM_RULE);
  init_symbol(&symbols[49u],
	      "WILL_FIRE_RL_ampel_testFSM_action_l27c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9,
	      1u);
  init_symbol(&symbols[50u],
	      "WILL_FIRE_RL_ampel_testFSM_action_l33c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14,
	      1u);
  init_symbol(&symbols[51u],
	      "WILL_FIRE_RL_ampel_testFSM_action_l36c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9,
	      1u);
  init_symbol(&symbols[52u],
	      "WILL_FIRE_RL_ampel_testFSM_action_l41c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33,
	      1u);
  init_symbol(&symbols[53u],
	      "WILL_FIRE_RL_ampel_testFSM_action_l52c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14,
	      1u);
  init_symbol(&symbols[54u],
	      "WILL_FIRE_RL_ampel_testFSM_action_l53c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14,
	      1u);
  init_symbol(&symbols[55u],
	      "WILL_FIRE_RL_ampel_testFSM_action_l54c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25,
	      1u);
  init_symbol(&symbols[56u],
	      "WILL_FIRE_RL_ampel_testFSM_action_l55c29",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29,
	      1u);
  init_symbol(&symbols[57u],
	      "WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9,
	      1u);
}


/* Rule actions */

void MOD_mkAmpelTest::RL_ampel_testFSM_start_reg__dreg_update()
{
  tUInt8 DEF_ampel_testFSM_start_reg_2_whas_AND_ampel_testF_ETC___d3;
  DEF_ampel_testFSM_start_reg_2_whas_AND_ampel_testF_ETC___d3 = INST_ampel_testFSM_start_reg_2.METH_whas() && INST_ampel_testFSM_start_reg_2.METH_wget();
  INST_ampel_testFSM_start_reg_1.METH_write(DEF_ampel_testFSM_start_reg_2_whas_AND_ampel_testF_ETC___d3);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_state_handle_abort()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_state_fired__dreg_update()
{
  tUInt8 DEF_ampel_testFSM_state_fired_1_whas__3_AND_ampel__ETC___d15;
  DEF_ampel_testFSM_state_fired_1_whas__3_AND_ampel__ETC___d15 = INST_ampel_testFSM_state_fired_1.METH_whas() && INST_ampel_testFSM_state_fired_1.METH_wget();
  INST_ampel_testFSM_state_fired.METH_write(DEF_ampel_testFSM_state_fired_1_whas__3_AND_ampel__ETC___d15);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_state_every()
{
  tUInt8 DEF_ampel_testFSM_state_set_pw_whas__6_OR_NOT_ampe_ETC___d21;
  DEF_ampel_testFSM_state_can_overlap__h4150 = INST_ampel_testFSM_state_can_overlap.METH_read();
  DEF_ampel_testFSM_state_set_pw_whas__6_OR_NOT_ampe_ETC___d21 = INST_ampel_testFSM_state_set_pw.METH_whas() || (!INST_ampel_testFSM_state_overlap_pw.METH_whas() && DEF_ampel_testFSM_state_can_overlap__h4150);
  INST_ampel_testFSM_state_can_overlap.METH_write(DEF_ampel_testFSM_state_set_pw_whas__6_OR_NOT_ampe_ETC___d21);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_restart()
{
  INST_ampel_testFSM_start_wire.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_l27c9()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)0u);
  INST_ampel_idle_counter.METH_write((tUInt8)0u);
  INST_ampel_pedestrian_state.METH_port0__write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_l33c14()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_l36c9()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)3u);
  INST_ampel_idle_counter.METH_write((tUInt8)14u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_l41c33()
{
  tUInt8 DEF_IF_ampel_pedestrian_request_port1__read__6_AND_ETC___d64;
  tUInt8 DEF_ampel_pedestrian_request_port1__read__6_AND_NO_ETC___d62;
  tUInt8 DEF_ampel_handeldRequest__h32346;
  DEF_ampel_handeldRequest__h32346 = INST_ampel_handeldRequest.METH_read();
  DEF_b__h10619 = INST_ampel_idle_counter.METH_read();
  DEF_ampel_pedestrian_request_port1__read__6_AND_NO_ETC___d62 = (INST_ampel_pedestrian_request.METH_port1__read() && !DEF_ampel_handeldRequest__h32346) && !(DEF_b__h10619 <= (tUInt8)5u);
  DEF_IF_ampel_pedestrian_request_port1__read__6_AND_ETC___d64 = DEF_ampel_pedestrian_request_port1__read__6_AND_NO_ETC___d62 ? (tUInt8)5u : (tUInt8)255u & (DEF_b__h10619 - (tUInt8)1u);
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)3u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
  INST_ampel_idle_counter.METH_write(DEF_IF_ampel_pedestrian_request_port1__read__6_AND_ETC___d64);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_ampel_pedestrian_request_port1__read__6_AND_NO_ETC___d62)
      dollar_display(sim_hdl, this, "s", &__str_literal_2);
  if (DEF_ampel_pedestrian_request_port1__read__6_AND_NO_ETC___d62)
    INST_ampel_handeldRequest.METH_write((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_l52c14()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)2u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_l53c14()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_l54c25()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
  INST_ampel_pedestrian_state.METH_port0__write((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_r_init_l55c9()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)8u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
  INST_ampel_testFSM_jj_repeat_count.METH_write(1u);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_l55c29()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)10u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
}

void MOD_mkAmpelTest::RL_ampel_testFSM_action_ovlp_r_update_l55c9()
{
  tUInt32 DEF_x__h34549;
  tUInt32 DEF_IF_ampel_testFSM_jj_repeat_count_read__6_BIT_9_ETC___d89;
  DEF_ampel_testFSM_jj_repeat_count_read____d36 = INST_ampel_testFSM_jj_repeat_count.METH_read();
  DEF_x__h34549 = 1023u & ((((tUInt32)(511u & DEF_ampel_testFSM_jj_repeat_count_read____d36)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_ampel_testFSM_jj_repeat_count_read__6_BIT_9_ETC___d89 = (tUInt8)(DEF_ampel_testFSM_jj_repeat_count_read____d36 >> 9u) ? 1u : DEF_x__h34549;
  INST_ampel_testFSM_state_overlap_pw.METH_wset();
  INST_ampel_testFSM_jj_repeat_count.METH_write(DEF_IF_ampel_testFSM_jj_repeat_count_read__6_BIT_9_ETC___d89);
}

void MOD_mkAmpelTest::RL_ampel_testFSM_idle_l25c14()
{
  INST_ampel_testFSM_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_ampel_testFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_state_set_pw.METH_wset();
}

void MOD_mkAmpelTest::RL_ampel_testFSM_fsm_start()
{
  INST_ampel_testFSM_start_wire.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_start_reg_2.METH_wset((tUInt8)1u);
  INST_ampel_testFSM_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_ampel_startit()
{
  INST_ampel_testFSM_start_reg.METH_write((tUInt8)1u);
  INST_ampel_startetFSM.METH_write((tUInt8)1u);
  INST_ampel_handeldRequest.METH_write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_ampel_sequel()
{
  INST_ampel_testFSM_start_reg.METH_write((tUInt8)1u);
  INST_ampel_pedestrian_request.METH_port0__write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_check()
{
  tUInt32 DEF_counter_08_PLUS_1___d109;
  tUInt8 DEF_NOT_counter_08_SLE_50_10___d111;
  tUInt8 DEF_ampel_pedestrian_state_port1__read____d107;
  tUInt8 DEF_ampel_state_port1__read____d106;
  tUInt32 DEF_b__h35075;
  DEF_b__h35075 = INST_counter.METH_read();
  DEF_ampel_state_port1__read____d106 = INST_ampel_state.METH_port1__read();
  DEF_ampel_pedestrian_state_port1__read____d107 = INST_ampel_pedestrian_state.METH_port1__read();
  DEF_counter_08_PLUS_1___d109 = DEF_b__h35075 + 1u;
  DEF_NOT_counter_08_SLE_50_10___d111 = !primSLE8(1u, 32u, (tUInt32)(DEF_b__h35075), 32u, 50u);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h34989 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,64,2,1",
		   &__str_literal_3,
		   DEF_v__h34989,
		   DEF_ampel_state_port1__read____d106,
		   DEF_ampel_pedestrian_state_port1__read____d107);
  INST_counter.METH_write(DEF_counter_08_PLUS_1___d109);
  INST_ampel_pedestrian_request.METH_port0__write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_counter_08_SLE_50_10___d111)
      dollar_finish(sim_hdl, "32", 1u);
}

void MOD_mkAmpelTest::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9 && (((((((DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14 || DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25) || DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29))
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkAmpelTest::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14 && ((((((DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9 || DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25) || DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29))
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkAmpelTest::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9 && (((((DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33 || DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25) || DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29))
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}

void MOD_mkAmpelTest::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33 && ((((DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14 || DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25) || DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29))
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkAmpelTest::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14 && (((DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14 || DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25) || DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29))
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkAmpelTest::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14 && ((DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25 || DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9) || DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29))
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkAmpelTest::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25 && (DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9 || DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkAmpelTest::__me_check_12()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9 && DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29)
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}


/* Methods */


/* Reset routines */

void MOD_mkAmpelTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_counter.reset_RST(ARG_rst_in);
  INST_ampel_testFSM_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_ampel_testFSM_state_fired.reset_RST(ARG_rst_in);
  INST_ampel_testFSM_state_can_overlap.reset_RST(ARG_rst_in);
  INST_ampel_testFSM_start_reg_1.reset_RST(ARG_rst_in);
  INST_ampel_testFSM_start_reg.reset_RST(ARG_rst_in);
  INST_ampel_testFSM_jj_repeat_count.reset_RST(ARG_rst_in);
  INST_ampel_state.reset_RST(ARG_rst_in);
  INST_ampel_startetFSM.reset_RST(ARG_rst_in);
  INST_ampel_pedestrian_state.reset_RST(ARG_rst_in);
  INST_ampel_pedestrian_request.reset_RST(ARG_rst_in);
  INST_ampel_handeldRequest.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAmpelTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAmpelTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_ampel_handeldRequest.dump_state(indent + 2u);
  INST_ampel_idle_counter.dump_state(indent + 2u);
  INST_ampel_pedestrian_request.dump_state(indent + 2u);
  INST_ampel_pedestrian_state.dump_state(indent + 2u);
  INST_ampel_startetFSM.dump_state(indent + 2u);
  INST_ampel_state.dump_state(indent + 2u);
  INST_ampel_testFSM_abort.dump_state(indent + 2u);
  INST_ampel_testFSM_jj_repeat_count.dump_state(indent + 2u);
  INST_ampel_testFSM_start_reg.dump_state(indent + 2u);
  INST_ampel_testFSM_start_reg_1.dump_state(indent + 2u);
  INST_ampel_testFSM_start_reg_2.dump_state(indent + 2u);
  INST_ampel_testFSM_start_wire.dump_state(indent + 2u);
  INST_ampel_testFSM_state_can_overlap.dump_state(indent + 2u);
  INST_ampel_testFSM_state_fired.dump_state(indent + 2u);
  INST_ampel_testFSM_state_fired_1.dump_state(indent + 2u);
  INST_ampel_testFSM_state_mkFSMstate.dump_state(indent + 2u);
  INST_ampel_testFSM_state_overlap_pw.dump_state(indent + 2u);
  INST_ampel_testFSM_state_set_pw.dump_state(indent + 2u);
  INST_counter.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAmpelTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 33u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_testFSM_action_l27c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_testFSM_action_l33c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_testFSM_action_l36c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_testFSM_action_l41c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_testFSM_action_l52c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_testFSM_action_l53c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_testFSM_action_l54c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_testFSM_action_l55c29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ampel_testFSM_jj_repeat_count_read____d36", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ampel_testFSM_state_can_overlap__h4150", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h10619", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h34989", 64u);
  num = INST_ampel_handeldRequest.dump_VCD_defs(num);
  num = INST_ampel_idle_counter.dump_VCD_defs(num);
  num = INST_ampel_pedestrian_request.dump_VCD_defs(num);
  num = INST_ampel_pedestrian_state.dump_VCD_defs(num);
  num = INST_ampel_startetFSM.dump_VCD_defs(num);
  num = INST_ampel_state.dump_VCD_defs(num);
  num = INST_ampel_testFSM_abort.dump_VCD_defs(num);
  num = INST_ampel_testFSM_jj_repeat_count.dump_VCD_defs(num);
  num = INST_ampel_testFSM_start_reg.dump_VCD_defs(num);
  num = INST_ampel_testFSM_start_reg_1.dump_VCD_defs(num);
  num = INST_ampel_testFSM_start_reg_2.dump_VCD_defs(num);
  num = INST_ampel_testFSM_start_wire.dump_VCD_defs(num);
  num = INST_ampel_testFSM_state_can_overlap.dump_VCD_defs(num);
  num = INST_ampel_testFSM_state_fired.dump_VCD_defs(num);
  num = INST_ampel_testFSM_state_fired_1.dump_VCD_defs(num);
  num = INST_ampel_testFSM_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_ampel_testFSM_state_overlap_pw.dump_VCD_defs(num);
  num = INST_ampel_testFSM_state_set_pw.dump_VCD_defs(num);
  num = INST_counter.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAmpelTest::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAmpelTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkAmpelTest::vcd_defs(tVCDDumpType dt, MOD_mkAmpelTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9) != DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14) != DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9) != DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33) != DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14) != DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14) != DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25) != DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29) != DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9) != DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9 = DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9;
      }
      ++num;
      if ((backing.DEF_ampel_testFSM_jj_repeat_count_read____d36) != DEF_ampel_testFSM_jj_repeat_count_read____d36)
      {
	vcd_write_val(sim_hdl, num, DEF_ampel_testFSM_jj_repeat_count_read____d36, 10u);
	backing.DEF_ampel_testFSM_jj_repeat_count_read____d36 = DEF_ampel_testFSM_jj_repeat_count_read____d36;
      }
      ++num;
      if ((backing.DEF_ampel_testFSM_state_can_overlap__h4150) != DEF_ampel_testFSM_state_can_overlap__h4150)
      {
	vcd_write_val(sim_hdl, num, DEF_ampel_testFSM_state_can_overlap__h4150, 1u);
	backing.DEF_ampel_testFSM_state_can_overlap__h4150 = DEF_ampel_testFSM_state_can_overlap__h4150;
      }
      ++num;
      if ((backing.DEF_b__h10619) != DEF_b__h10619)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h10619, 8u);
	backing.DEF_b__h10619 = DEF_b__h10619;
      }
      ++num;
      if ((backing.DEF_v__h34989) != DEF_v__h34989)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h34989, 64u);
	backing.DEF_v__h34989 = DEF_v__h34989;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29 = DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9 = DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9;
      vcd_write_val(sim_hdl, num++, DEF_ampel_testFSM_jj_repeat_count_read____d36, 10u);
      backing.DEF_ampel_testFSM_jj_repeat_count_read____d36 = DEF_ampel_testFSM_jj_repeat_count_read____d36;
      vcd_write_val(sim_hdl, num++, DEF_ampel_testFSM_state_can_overlap__h4150, 1u);
      backing.DEF_ampel_testFSM_state_can_overlap__h4150 = DEF_ampel_testFSM_state_can_overlap__h4150;
      vcd_write_val(sim_hdl, num++, DEF_b__h10619, 8u);
      backing.DEF_b__h10619 = DEF_b__h10619;
      vcd_write_val(sim_hdl, num++, DEF_v__h34989, 64u);
      backing.DEF_v__h34989 = DEF_v__h34989;
    }
}

void MOD_mkAmpelTest::vcd_prims(tVCDDumpType dt, MOD_mkAmpelTest &backing)
{
  INST_ampel_handeldRequest.dump_VCD(dt, backing.INST_ampel_handeldRequest);
  INST_ampel_idle_counter.dump_VCD(dt, backing.INST_ampel_idle_counter);
  INST_ampel_pedestrian_request.dump_VCD(dt, backing.INST_ampel_pedestrian_request);
  INST_ampel_pedestrian_state.dump_VCD(dt, backing.INST_ampel_pedestrian_state);
  INST_ampel_startetFSM.dump_VCD(dt, backing.INST_ampel_startetFSM);
  INST_ampel_state.dump_VCD(dt, backing.INST_ampel_state);
  INST_ampel_testFSM_abort.dump_VCD(dt, backing.INST_ampel_testFSM_abort);
  INST_ampel_testFSM_jj_repeat_count.dump_VCD(dt, backing.INST_ampel_testFSM_jj_repeat_count);
  INST_ampel_testFSM_start_reg.dump_VCD(dt, backing.INST_ampel_testFSM_start_reg);
  INST_ampel_testFSM_start_reg_1.dump_VCD(dt, backing.INST_ampel_testFSM_start_reg_1);
  INST_ampel_testFSM_start_reg_2.dump_VCD(dt, backing.INST_ampel_testFSM_start_reg_2);
  INST_ampel_testFSM_start_wire.dump_VCD(dt, backing.INST_ampel_testFSM_start_wire);
  INST_ampel_testFSM_state_can_overlap.dump_VCD(dt, backing.INST_ampel_testFSM_state_can_overlap);
  INST_ampel_testFSM_state_fired.dump_VCD(dt, backing.INST_ampel_testFSM_state_fired);
  INST_ampel_testFSM_state_fired_1.dump_VCD(dt, backing.INST_ampel_testFSM_state_fired_1);
  INST_ampel_testFSM_state_mkFSMstate.dump_VCD(dt, backing.INST_ampel_testFSM_state_mkFSMstate);
  INST_ampel_testFSM_state_overlap_pw.dump_VCD(dt, backing.INST_ampel_testFSM_state_overlap_pw);
  INST_ampel_testFSM_state_set_pw.dump_VCD(dt, backing.INST_ampel_testFSM_state_set_pw);
  INST_counter.dump_VCD(dt, backing.INST_counter);
}
