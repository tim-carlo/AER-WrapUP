/*
 * Generated by Bluespec Compiler, version 2023.07-7-g527eaa0b (build 527eaa0b)
 * 
 * On Sat Feb 10 22:40:46 UTC 2024
 * 
 */

/* Generation options: */
#ifndef __mkAmpelTest_h__
#define __mkAmpelTest_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkAmpelTest module */
class MOD_mkAmpelTest : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_ampel_handeldRequest;
  MOD_Reg<tUInt8> INST_ampel_idle_counter;
  MOD_CReg<tUInt8> INST_ampel_pedestrian_request;
  MOD_CReg<tUInt8> INST_ampel_pedestrian_state;
  MOD_Reg<tUInt8> INST_ampel_startetFSM;
  MOD_CReg<tUInt8> INST_ampel_state;
  MOD_Wire<tUInt8> INST_ampel_testFSM_abort;
  MOD_ConfigReg<tUInt32> INST_ampel_testFSM_jj_repeat_count;
  MOD_Reg<tUInt8> INST_ampel_testFSM_start_reg;
  MOD_Reg<tUInt8> INST_ampel_testFSM_start_reg_1;
  MOD_Wire<tUInt8> INST_ampel_testFSM_start_reg_2;
  MOD_Wire<tUInt8> INST_ampel_testFSM_start_wire;
  MOD_Reg<tUInt8> INST_ampel_testFSM_state_can_overlap;
  MOD_Reg<tUInt8> INST_ampel_testFSM_state_fired;
  MOD_Wire<tUInt8> INST_ampel_testFSM_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_ampel_testFSM_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_ampel_testFSM_state_overlap_pw;
  MOD_Wire<tUInt8> INST_ampel_testFSM_state_set_pw;
  MOD_Reg<tUInt32> INST_counter;
 
 /* Constructor */
 public:
  MOD_mkAmpelTest(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_ampel_testFSM_action_l55c29;
  tUInt8 DEF_WILL_FIRE_RL_ampel_testFSM_action_r_init_l55c9;
  tUInt8 DEF_WILL_FIRE_RL_ampel_testFSM_action_l54c25;
  tUInt8 DEF_WILL_FIRE_RL_ampel_testFSM_action_l53c14;
  tUInt8 DEF_WILL_FIRE_RL_ampel_testFSM_action_l52c14;
  tUInt8 DEF_WILL_FIRE_RL_ampel_testFSM_action_l41c33;
  tUInt8 DEF_WILL_FIRE_RL_ampel_testFSM_action_l36c9;
  tUInt8 DEF_WILL_FIRE_RL_ampel_testFSM_action_l33c14;
  tUInt8 DEF_WILL_FIRE_RL_ampel_testFSM_action_l27c9;
  tUInt32 DEF_ampel_testFSM_jj_repeat_count_read____d36;
  tUInt8 DEF_b__h10619;
  tUInt8 DEF_ampel_testFSM_state_can_overlap__h4150;
 
 /* Local definitions */
 private:
  tUInt64 DEF_v__h34989;
 
 /* Rules */
 public:
  void RL_ampel_testFSM_start_reg__dreg_update();
  void RL_ampel_testFSM_state_handle_abort();
  void RL_ampel_testFSM_state_fired__dreg_update();
  void RL_ampel_testFSM_state_every();
  void RL_ampel_testFSM_restart();
  void RL_ampel_testFSM_action_l27c9();
  void RL_ampel_testFSM_action_l33c14();
  void RL_ampel_testFSM_action_l36c9();
  void RL_ampel_testFSM_action_l41c33();
  void RL_ampel_testFSM_action_l52c14();
  void RL_ampel_testFSM_action_l53c14();
  void RL_ampel_testFSM_action_l54c25();
  void RL_ampel_testFSM_action_r_init_l55c9();
  void RL_ampel_testFSM_action_l55c29();
  void RL_ampel_testFSM_action_ovlp_r_update_l55c9();
  void RL_ampel_testFSM_idle_l25c14();
  void RL_ampel_testFSM_fsm_start();
  void RL_ampel_startit();
  void RL_ampel_sequel();
  void RL_check();
  void __me_check_5();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
  void __me_check_10();
  void __me_check_11();
  void __me_check_12();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAmpelTest &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkAmpelTest &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkAmpelTest &backing);
};

#endif /* ifndef __mkAmpelTest_h__ */
